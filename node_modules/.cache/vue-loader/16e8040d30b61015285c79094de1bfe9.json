{"remainingRequest":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/ssd1/gfy/ai-project/src/components/graphs/graph_scatter.vue?vue&type=script&lang=js&","dependencies":[{"path":"/ssd1/gfy/ai-project/src/components/graphs/graph_scatter.vue","mtime":1586004863000},{"path":"/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018000},{"path":"/ssd1/gfy/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":1574947019000},{"path":"/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018000},{"path":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":1574947026000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport $search from \"./../../util/search.js\"\nlet echarts = require('echarts');\n\nexport default {\n    name: \"scatter\",\n    props: {\n        items: {\n            type: Object,\n            default () {\n                return {\n                    \"test\": \"test\"\n                }\n            }\n        },\n        keyWord:{\n            type:String,\n            default(){\n                return \"keyString\"\n            }\n        }\n    },\n    data() {\n        return {\n             //tabItem:\"AllTab\"\n        }\n    },\n    mounted() {\n        // this.draw_linefold();\n        this.start_draw();\n    },\n\n    methods: {\n        start_draw() {\n            // let key = [];\n            // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n            let itemData = this.items;\n            // console.log(\"itemData=\"+JSON.stringify(itemData));\n            for (let i in itemData){\n                console.log(\"key :\"+this.keyWord+\"_\"+i);\n                let id = this.keyWord+\"_\"+i;\n                // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                this.draw_scatter(id,itemData[i]);\n            }\n        },\n        draw_scatter(id, data) {\n\n            let title = data['title'];\n            let testdata = data['data'];\n            let chart = document.getElementById(id);\n            \n           \n            var initial = function () {\n              \n                \n                // 获取 chart 的父父结点chartParent，再根据其算宽度\n                let chartParent = chart.parentNode.parentNode;\n                chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                chart.style.margin = \"0 auto\";\n                chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n            }\n            initial();\n            \n            // 初始化图的宽度\n            // chart.style.width = this.initial_style(chart);\n\n            let myChart = echarts.init(chart);\n            let datakey = [];\n            \n            var bidword=[];\n            var avePrice=[];\n            var influence=[];\n            var series = [];\n            var j = 0;\n            var xy=[];\n            var min=99999;\n            var max=0;\n\n            for (var key in testdata){\n                var onedata = testdata[key];\n                //bidword.push(onedata.bidword);\n                if(onedata.influence>max) max =onedata.influence;\n                if(onedata.influence<min) min=onedata.influence; \n                bidword.push(onedata.bidword);\n                avePrice.push(onedata.avePrice);\n                influence.push(onedata.influence);\n                xy.push([onedata.avePrice,onedata.influence,onedata.bidword]);\n            }\n            series.push({\n                    name: 'bidword',\n                    type: 'scatter',\n                    symbolSize: 9,\n                    data: xy\n                })\n                    \n            \n            const option ={\n\n                title: {\n                        text: title,\n                        left: 'left',\n                        top: 0\n                },\n                toolbox: {\n                        show: true,\n                        feature: {\n                            saveAsImage: {\n                                show: true,\n                                type: \"png\",\n                                pixelRatio: 3\n                            },\n                            restore: {\n                                show: true,\n                            }\n                        }\n                },\n                visualMap: {     \n                    min: min,\n                    max:  max,                 \n                    dimension: 1,\n                    orient: 'vertical',\n                    right: 10,\n                    top: 'center',\n                    text: ['HIGH', 'LOW'],\n                    calculable: true,\n                    inRange: {\n                        color: ['#37ecba', '#72afd3']\n                    }\n                },\n                \n                tooltip: {\n                    trigger: 'item',\n                    //backgroundColor : 'rgba(0,0,250,0.2)' ,\n                    padding: 10,\n                    //backgroundColor: '#222',\n                    //borderColor: '#777',\n                    //borderWidth: 1,\n                    formatter: function (obj) {\n                        var value = obj.value;\n                         return '<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 18px;padding-bottom: 7px;margin-bottom: 7px\">'\n                           +'name: '+ value[2] +'<br>'\n                          + 'avePrice: ' + value[0] + '<br>' + 'influence: '+value[1]\n                          +'</div>';\n                    },\n\t\t\n                    /*\n                    axisPointer: {\n                        type: 'cross'\n                    },\n                    padding: 10,\n                    backgroundColor: '#222',\n                    borderColor: '#777',\n                    borderWidth: 1,\n                    \n                    */\n                },\n                \n                xAxis: [{\n                    type: 'value',\n                    name : 'avePrice'\n                }],\n                yAxis: [{\n                    type: 'value',\n                    name: 'influence'\n                }],\n                series: series \n               \n            };\n           \n            myChart.setOption(option);\n\n           \n            // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n            // window.onresize = function(){\n            //     console.log(\"window resize!\")\n            //     initial();\n            //     myChart.resize();\n            //     console.log(\"myChart resize!\")\n            // }\n\n            // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n            window.addEventListener('resize', function () \n            {\n                initial();\n           \n                myChart.resize()\n            })\n\n            myChart.on(\"click\",function(params){\n                // console.log(params);\n                // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                // $router.push({\n                //     path:\"/displayInfo\",\n                //     query:{query:params['seriesName'].toLowerCase()}\n                // })\n                let query = params['seriesName'].toLowerCase();\n                $search.to_display(query);\n            })\n            console.log(\"哈哈哈\");\n        }\n    }\n}\n",{"version":3,"sources":["graph_scatter.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"graph_scatter.vue","sourceRoot":"src/components/graphs","sourcesContent":["<template>\n  <div class=\"hellotheworld\">\n\t<div class=\"wrap\">\n\t\t<aside class=\"left\">\n\t\t\t<p>figure2/3</p>\n\t\t\t<div class=\"name\">竞价影响力与价值分布</div>\n\t\t\t<ul>\n\t\t\t\t<li>类型：散点图</li>\n\t\t\t\t<li>点：竞价词</li>\n\t\t\t\t<li>维度：平均价格/影响力</li>\n\t\t\t</ul>\n\t\t\t<div class=\"texts\">图片描述：展示[广告商]参与竞价的所有竞价词的影响力与价值分布，每一个点表示该广告商参与竞价过的一个竞价词，您可以通过此图了解[广告商]参与竞价的广度，也可以通过选择某一结点了解对应的平均价格与影响力，选出对于[广告商]而言平均报价大同时影响力也大的竞价词。</div>\n\t\t</aside>\n\t\t<section class=\"right\">\n\t\t\t<el-tabs type=\"border-card\">\n\t\t\t  <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n\t\t\t\t  <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n\t\t\t  </el-tab-pane>\n\t\t\t</el-tabs>\n\t\t</section>\n\t</div>\n\t<div class=\"blank\"></div>\n  </div>\n</template>\n<script>\n    import $search from \"./../../util/search.js\"\n    let echarts = require('echarts');\n\n    export default {\n        name: \"scatter\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord:{\n                type:String,\n                default(){\n                    return \"keyString\"\n                }\n            }\n        },\n        data() {\n            return {\n                 //tabItem:\"AllTab\"\n            }\n        },\n        mounted() {\n            // this.draw_linefold();\n            this.start_draw();\n        },\n\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (let i in itemData){\n                    console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_scatter(id,itemData[i]);\n                }\n            },\n            draw_scatter(id, data) {\n\n                let title = data['title'];\n                let testdata = data['data'];\n                let chart = document.getElementById(id);\n                \n               \n                var initial = function () {\n                  \n                    \n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n                \n                // 初始化图的宽度\n                // chart.style.width = this.initial_style(chart);\n\n                let myChart = echarts.init(chart);\n                let datakey = [];\n                \n                var bidword=[];\n                var avePrice=[];\n                var influence=[];\n                var series = [];\n                var j = 0;\n                var xy=[];\n                var min=99999;\n                var max=0;\n\n                for (var key in testdata){\n                    var onedata = testdata[key];\n                    //bidword.push(onedata.bidword);\n                    if(onedata.influence>max) max =onedata.influence;\n                    if(onedata.influence<min) min=onedata.influence; \n                    bidword.push(onedata.bidword);\n                    avePrice.push(onedata.avePrice);\n                    influence.push(onedata.influence);\n                    xy.push([onedata.avePrice,onedata.influence,onedata.bidword]);\n                }\n                series.push({\n                        name: 'bidword',\n                        type: 'scatter',\n                        symbolSize: 9,\n                        data: xy\n                    })\n                        \n                \n                const option ={\n\n                    title: {\n                            text: title,\n                            left: 'left',\n                            top: 0\n                    },\n                    toolbox: {\n                            show: true,\n                            feature: {\n                                saveAsImage: {\n                                    show: true,\n                                    type: \"png\",\n                                    pixelRatio: 3\n                                },\n                                restore: {\n                                    show: true,\n                                }\n                            }\n                    },\n                    visualMap: {     \n                        min: min,\n                        max:  max,                 \n                        dimension: 1,\n                        orient: 'vertical',\n                        right: 10,\n                        top: 'center',\n                        text: ['HIGH', 'LOW'],\n                        calculable: true,\n                        inRange: {\n                            color: ['#37ecba', '#72afd3']\n                        }\n                    },\n                    \n                    tooltip: {\n                        trigger: 'item',\n                        //backgroundColor : 'rgba(0,0,250,0.2)' ,\n                        padding: 10,\n                        //backgroundColor: '#222',\n                        //borderColor: '#777',\n                        //borderWidth: 1,\n                        formatter: function (obj) {\n                            var value = obj.value;\n                             return '<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 18px;padding-bottom: 7px;margin-bottom: 7px\">'\n                               +'name: '+ value[2] +'<br>'\n                              + 'avePrice: ' + value[0] + '<br>' + 'influence: '+value[1]\n                              +'</div>';\n                        },\n\t\t\t\t\t\t\n                        /*\n                        axisPointer: {\n                            type: 'cross'\n                        },\n                        padding: 10,\n                        backgroundColor: '#222',\n                        borderColor: '#777',\n                        borderWidth: 1,\n                        \n                        */\n                    },\n                    \n                    xAxis: [{\n                        type: 'value',\n                        name : 'avePrice'\n                    }],\n                    yAxis: [{\n                        type: 'value',\n                        name: 'influence'\n                    }],\n                    series: series \n                   \n                };\n               \n                myChart.setOption(option);\n\n               \n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () \n                {\n                    initial();\n               \n                    myChart.resize()\n                })\n\n                myChart.on(\"click\",function(params){\n                    // console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    // $router.push({\n                    //     path:\"/displayInfo\",\n                    //     query:{query:params['seriesName'].toLowerCase()}\n                    // })\n                    let query = params['seriesName'].toLowerCase();\n                    $search.to_display(query);\n                })\n                console.log(\"哈哈哈\");\n            }\n        }\n    }\n</script>\n\n<style scoped>\n  .wrap{\n  \twidth:900px;\n  \tmargin:0 auto;\n  \tposition: relative;\n\t}   \n  \n  .left{\n\t\twidth:300px;\n\t\theight:500px;\n\t\tposition: absolute;\n\t\ttop:0;\n\t\tleft:0;\n\t\tmargin: 0% -3%;\n\t\tbackground: #E1E1E1;\n\t\tborder:7px solid #FFFFFF;}\n  \n  .right{\n\t\twidth:600px;\n\t\theight:500px;\n\t\tbackground: #dbeef3;\n\t\tposition: absolute;\n\t\ttop:0;\n\t\tright:0;\n\t\tmargin: 0% -3%;\n\t\tborder:7px solid #FFFFFF;}\n  \n  .blank{\n\t\twidth:600px;\n\t\theight:550px;}\n\t\n  .name{\n\t\tdisplay: inline-block;\n\t\tfont-size: 20px;\n\t\tfont-weight: 700;\n\t\tbackground: #f5f5f5;\n\t\tpadding: 25px;\n\t\twidth:100%;\n\t\ttext-align: center;}\n\t\t\n\tp{\n\t\tfont-size:12px;\n\t\ttext-align:center;\n\t\tcolor: #999999;}\n\t\t\n\tbody{\n\tbackground:#F2F2F2;}\n   \n  .left ul {\n    list-style: none;\n    margin: 25px 30px 15px 30px;}\n\n  .left li {\n    padding: 10px 0;\n\tfont-size: 13px;\n    border-bottom: 1px solid #999999;\n\ttext-align: center;}\n\t\n   .texts{\n\t   width:300px;\n\t   height:auto;\n\t   font-size: 14px;\n\t   padding: 25px;\n\t   font-family: \"arial black\";\n   }\n</style>\n"]}]}