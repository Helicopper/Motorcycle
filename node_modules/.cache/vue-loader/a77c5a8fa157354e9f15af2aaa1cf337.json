{"remainingRequest":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/var/www/html/ai-project/src/components/graphs/graph_pie.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/ai-project/src/components/graphs/graph_pie.vue","mtime":1551873133072},{"path":"/var/www/html/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport $search from \"./../../util/search.js\"\n\nlet echarts = require('echarts');\nexport default {\n    name: \"pie\",\n    props: {\n        items: {\n            type: Object,\n            default () {\n                return {\n                    \"test\": \"test\"\n                }\n            }\n        },\n        keyWord: {\n            type:String,\n            default() {\n                return \"test\"\n            }\n        }\n    },\n    data() {\n        return {\n            // tabItem:\"Paper\"\n        }\n    },\n    mounted() {\n        this.start_draw();\n    },\n    // watch:{\n    //     items:function() {\n    //         // this.draw_linefold();\n    //         console.log(\"watch items:\"+ items);\n    //     },\n    //     deep:true\n    // },\n    // updated:function() {\n    //     this.$nextTick(function(){\n    //         console.log(\"updated!\");\n    //         this.start_draw();\n    //     })\n    // },\n    methods: {\n        start_draw() {\n            // let key = [];\n            // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n            let itemData = this.items;\n            console.log(\"itemData=\"+JSON.stringify(itemData));\n            for (let i in itemData){\n                // console.log(\"key :\"+this.keyWord+'_'+i);\n                let id = this.keyWord+'_'+i;\n                // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+JSON.stringify(itemData[i]['data']));\n                this.draw_pie(id,itemData[i]);\n            }\n        },\n        draw_pie(id,data) {\n            let chart = document.getElementById(id);\n            // 给echart初始化宽度，替代系统的初始值100px。参考博客：https://unordered.org/timelines/5a0c74067b000000\n            var initial = function () {\n                // 根据想要的效果调整的公式，不是固定的\n                // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                \n                // 获取 chart 的父父结点chartParent，再根据其算宽度\n                let chartParent = chart.parentNode.parentNode;\n                chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                chart.style.margin = \"0 auto\";\n                chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n            }\n            initial();\n            let title = data['title']\n            let graph_data = data['data']\n            let legendData = Object.keys(graph_data);\n            let seriesData = [];\n            for (var key in graph_data) {\n                seriesData.push({\n                    name: key,\n                    value: graph_data[key],\n                });\n            }\n            let myChart = echarts.init(chart);\n\n            const option = {\n              title: {\n                  text: title,\n                //   subtext: 'test',\n                //   x: 'center',\n                  y: 'top'\n              },\n              tooltip: {\n                  trigger: 'item',\n                  formatter: \"{b} : {c} ({d}%)\"\n              },\n              legend: {\n                  \n                type: 'scroll', // 图例过多加上滚动条\n                //   orient: 'vertical',\n                  show:true,\n                //   right: 10,\n                  top:\"10%\",\n                //   bottom: 0,\n                  data: legendData,\n                  // selected: data.selected\n              },\n              color: [\"rgb(255, 138, 128)\",\"rgb(225, 190, 231)\",\"rgb(130, 177, 255)\",\"rgb(128, 222, 234)\",\"rgb(129, 199, 132)\",\"rgb(255, 183, 77)\",\"rgb(245, 124, 0)\",\"rgb(248, 187, 208)\"],\n              calculable: true,\n              series: [\n                  {\n                      type: 'pie',\n                      radius: '55%',\n                      center: ['50%', '65%'],\n                      itemStyle: {\n                          emphasis: {\n                              label: {\n                                  show: true,\n                                  textStyle: {\n                                      fontWeight: 'bold'\n                                  },\n                                  shadowBlur: 10,\n                                  shadowOffsetX: 0,\n                                  shadowColor: 'rgba(0, 0, 0, 0.5)'\n                              }\n                          }\n                      },\n                      data: seriesData,\n                      roseType: 'radius'  // 玫瑰图\n                  }\n              ]\n          };\n\n            myChart.setOption(option);\n\n            // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n            // window.onresize = function(){\n            //     console.log(\"window resize!\")\n            //     initial();\n            //     myChart.resize();\n            //     console.log(\"myChart resize!\")\n            // }\n\n            // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n            window.addEventListener('resize', function () {\n                initial();\n                myChart.resize()\n            })\n\n            // 这种写法无法实现自适应，不知道为什么\n            // window.onresize = (\"resize\",function() {\n            //     initial();\n            //     echart.resize()\n            // })\n            myChart.on(\"click\",function(params){\n                // console.log(params);\n                // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                // $router.push({\n                //     path:\"/displayInfo\",\n                //     query:{query:params.data.name.toLowerCase()}\n                // })\n                let query = params.data.name.toLowerCase()\n                $search.to_display(query);\n            })\n        }\n    }\n}\n",{"version":3,"sources":["graph_pie.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"graph_pie.vue","sourceRoot":"src/components/graphs","sourcesContent":["<template>\n<div>\n    <el-tabs type=\"border-card\">\n    <!-- <el-tabs> -->\n    <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n    </el-tab-pane>\n</el-tabs>\n</div>\n</template>\n<script>\n    import $search from \"./../../util/search.js\"\n\n    let echarts = require('echarts');\n    export default {\n        name: \"pie\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (let i in itemData){\n                    // console.log(\"key :\"+this.keyWord+'_'+i);\n                    let id = this.keyWord+'_'+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+JSON.stringify(itemData[i]['data']));\n                    this.draw_pie(id,itemData[i]);\n                }\n            },\n            draw_pie(id,data) {\n                let chart = document.getElementById(id);\n                // 给echart初始化宽度，替代系统的初始值100px。参考博客：https://unordered.org/timelines/5a0c74067b000000\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                    \n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n                let title = data['title']\n                let graph_data = data['data']\n                let legendData = Object.keys(graph_data);\n                let seriesData = [];\n                for (var key in graph_data) {\n                    seriesData.push({\n                        name: key,\n                        value: graph_data[key],\n                    });\n                }\n                let myChart = echarts.init(chart);\n\n                const option = {\n                  title: {\n                      text: title,\n                    //   subtext: 'test',\n                    //   x: 'center',\n                      y: 'top'\n                  },\n                  tooltip: {\n                      trigger: 'item',\n                      formatter: \"{b} : {c} ({d}%)\"\n                  },\n                  legend: {\n                      \n                    type: 'scroll', // 图例过多加上滚动条\n                    //   orient: 'vertical',\n                      show:true,\n                    //   right: 10,\n                      top:\"10%\",\n                    //   bottom: 0,\n                      data: legendData,\n                      // selected: data.selected\n                  },\n                  color: [\"rgb(255, 138, 128)\",\"rgb(225, 190, 231)\",\"rgb(130, 177, 255)\",\"rgb(128, 222, 234)\",\"rgb(129, 199, 132)\",\"rgb(255, 183, 77)\",\"rgb(245, 124, 0)\",\"rgb(248, 187, 208)\"],\n                  calculable: true,\n                  series: [\n                      {\n                          type: 'pie',\n                          radius: '55%',\n                          center: ['50%', '65%'],\n                          itemStyle: {\n                              emphasis: {\n                                  label: {\n                                      show: true,\n                                      textStyle: {\n                                          fontWeight: 'bold'\n                                      },\n                                      shadowBlur: 10,\n                                      shadowOffsetX: 0,\n                                      shadowColor: 'rgba(0, 0, 0, 0.5)'\n                                  }\n                              }\n                          },\n                          data: seriesData,\n                          roseType: 'radius'  // 玫瑰图\n                      }\n                  ]\n              };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    // console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    // $router.push({\n                    //     path:\"/displayInfo\",\n                    //     query:{query:params.data.name.toLowerCase()}\n                    // })\n                    let query = params.data.name.toLowerCase()\n                    $search.to_display(query);\n                })\n            }\n        }\n    }\n</script>\n<style>\n  .graph {\n    width: 100%;\n    min-height: 300px;\n    /* height: 400px; */\n  }\n  .tabs {\n      box-shadow:0 2px 4px 0 rgba(0,0,0,0.1), 0 3px 10px 0 rgba(0,0,0,0.15);\n      padding:10px;\n      /* border-radius: 5px; */\n  }\n</style>"]}]}