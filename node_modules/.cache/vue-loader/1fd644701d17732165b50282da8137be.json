{"remainingRequest":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/ssd1/gfy/ai-project/src/components/graphs/graph_sun.vue?vue&type=script&lang=js&","dependencies":[{"path":"/ssd1/gfy/ai-project/src/components/graphs/graph_sun.vue","mtime":1574946998000},{"path":"/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018000},{"path":"/ssd1/gfy/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":1574947019000},{"path":"/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018000},{"path":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":1574947026000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport $search from \"./../../util/search.js\"\n\n    let echarts = require('echarts');\n    export default {\n        name: \"sun\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_sun(id,itemData[i]);\n                }\n            },\n            draw_sun(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                    \n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n                // let color = this.set_color();\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n                for (let i in graph_data){\n                    graph_data[i][\"itemStyle\"] = {\n                        \"color\":this.$graphs.set_color()\n                    }\n                    let children = graph_data[i][\"children\"]\n                    for (let k in children){\n                        children[k][\"itemStyle\"] = {\n                            \"color\":this.$graphs.set_color()\n                        }\n                    }\n                }\n                // console.log(JSON.stringify(graph_data));\n\n                const option = {\n                    title: {\n                        text: title,\n                        // subtext: 'Source: https://worldcoffeeresearch.org/work/sensory-lexicon/',\n                        // textStyle: {\n                        //     fontSize: 14,\n                        //     align: 'center'\n                        // },\n                        // subtextStyle: {\n                        //     align: 'center'\n                        // },\n                        // sublink: 'https://worldcoffeeresearch.org/work/sensory-lexicon/'\n                    },\n                    tooltip: {\n                        trigger: 'item',\n                        // backgroundColor : 'rgba(0,0,250,0.2)',\n                        backgroundColor:'rgba(66, 66, 66,0.6)',  // 前面三个是颜色值，最后一个是透明度，0~1，越小越透明\n                        // formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n                        formatter:function(params){\n                            // console.log(params);\n                            let tooltipString = \"\";\n                            let itemName = params[\"data\"][\"name\"];\n                            let treePathInfo = params[\"treePathInfo\"];\n\n                            if(treePathInfo.length == 2) {\n                                let tooltipString = \"\";\n                                let children = params[\"data\"][\"children\"];\n                                tooltipString += itemName;\n                                tooltipString += \"(\"+ (treePathInfo[1][\"value\"]/treePathInfo[0][\"value\"])*100 + \"%)\" + \"<br/>\"\n                                for (let i in children){\n                                    tooltipString += children[i][\"name\"] + \"(\" + (children[i][\"value\"]/treePathInfo[0][\"value\"])*100 + \"%)\" + \"<br/>\"\n                                }\n                                return tooltipString\n                            }\n                            else if (treePathInfo.length == 3) {\n                                let tooltipString = \"\" ;\n                                tooltipString += itemName;\n                                tooltipString += \"(\"+ (treePathInfo[2][\"value\"]/treePathInfo[0][\"value\"])*100 + \"%)\" + \"<br/>\"\n                                return tooltipString\n                            }\n                            else {\n                                return \"点击返回上一层\"\n                            }\n                            \n                        }\n                    },\n                    // nodeClick:false,\n                    series: {\n                        type: 'sunburst',\n                        highlightPolicy: 'ancestor',\n                        data: graph_data,\n                        radius: [0, '95%'],\n                        sort: null,\n                        nodeClick:false,\n                        emphasis:{\n                            itemStyle:{\n                                borderColor:'rgba(190,190,190,0.3)',\n                                // shadowBlur:2,\n                                // shadowColor:'rgba(91,91,91,0.5)'\n                            }\n                        },\n                        levels: [{},\n                            {\n                            r0: '0%',\n                            r: '35%',\n                            itemStyle: {\n                                borderWidth: 2\n                            },\n                            label: {\n                                rotate: 'tangential'  // 标签文字是垂直于半径摆放 | 默认是按平行于半径摆放\n                            }\n                        }, {\n                            r0: '40%',\n                            r: '48%',\n                            label: {\n                                //align: 'right',\n                                position:'outside',\n                                padding:3\n                            },\n                            itemStyle:{\n                                borderWidth:4\n                            }\n                        }]\n                    },\n                    //color: [\"#60acfc\",\"#32d3eb\",\"#5bc49f\",\"#feb64d\",\"#ff7c7c\",\"#9287e7\"]\n                };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    // console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    // $router.push({\n                    //     path:\"/displayInfo\",\n                    //     query:{query:params.data.name.toLowerCase()}\n                    // })\n                    let query = params.data.name.toLowerCase()\n                    $search.to_display(query)\n                })\n            },\n            // set_color(){\n            //     let testcolor = [\"rgb(129, 212, 250)\",\"rgb(239, 154, 154)\",\"rgb(128, 203, 196)\",\"rgb(129, 199, 132)\",\"rgb(156, 204, 101)\",\"rgb(212, 225, 87)\",\"rgb(255, 213, 79)\",\"rgb(255, 167, 38)\",\"rgb(255, 110, 64)\",\"rgb(161, 136, 127)\",\"rgb(248, 187, 208)\",\"rgb(128, 203, 196)\",\"rgb(209, 196, 233)\"]\n            //     let num = Math.floor(Math.random() * testcolor.length);\n            //     return testcolor[num]\n            // }\n        }\n    }\n",{"version":3,"sources":["graph_sun.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"graph_sun.vue","sourceRoot":"src/components/graphs","sourcesContent":["<template>\n<div>\n    <el-tabs type=\"border-card\">\n    <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n        <!-- <p>{{index}},{{items[index][\"title\"]}}</p> -->\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n    </el-tab-pane>\n</el-tabs>\n</div>\n</template>\n<script>\nimport $search from \"./../../util/search.js\"\n\n    let echarts = require('echarts');\n    export default {\n        name: \"sun\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_sun(id,itemData[i]);\n                }\n            },\n            draw_sun(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                    \n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n                // let color = this.set_color();\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n                for (let i in graph_data){\n                    graph_data[i][\"itemStyle\"] = {\n                        \"color\":this.$graphs.set_color()\n                    }\n                    let children = graph_data[i][\"children\"]\n                    for (let k in children){\n                        children[k][\"itemStyle\"] = {\n                            \"color\":this.$graphs.set_color()\n                        }\n                    }\n                }\n                // console.log(JSON.stringify(graph_data));\n\n                const option = {\n                    title: {\n                        text: title,\n                        // subtext: 'Source: https://worldcoffeeresearch.org/work/sensory-lexicon/',\n                        // textStyle: {\n                        //     fontSize: 14,\n                        //     align: 'center'\n                        // },\n                        // subtextStyle: {\n                        //     align: 'center'\n                        // },\n                        // sublink: 'https://worldcoffeeresearch.org/work/sensory-lexicon/'\n                    },\n                    tooltip: {\n                        trigger: 'item',\n                        // backgroundColor : 'rgba(0,0,250,0.2)',\n                        backgroundColor:'rgba(66, 66, 66,0.6)',  // 前面三个是颜色值，最后一个是透明度，0~1，越小越透明\n                        // formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n                        formatter:function(params){\n                            // console.log(params);\n                            let tooltipString = \"\";\n                            let itemName = params[\"data\"][\"name\"];\n                            let treePathInfo = params[\"treePathInfo\"];\n\n                            if(treePathInfo.length == 2) {\n                                let tooltipString = \"\";\n                                let children = params[\"data\"][\"children\"];\n                                tooltipString += itemName;\n                                tooltipString += \"(\"+ (treePathInfo[1][\"value\"]/treePathInfo[0][\"value\"])*100 + \"%)\" + \"<br/>\"\n                                for (let i in children){\n                                    tooltipString += children[i][\"name\"] + \"(\" + (children[i][\"value\"]/treePathInfo[0][\"value\"])*100 + \"%)\" + \"<br/>\"\n                                }\n                                return tooltipString\n                            }\n                            else if (treePathInfo.length == 3) {\n                                let tooltipString = \"\" ;\n                                tooltipString += itemName;\n                                tooltipString += \"(\"+ (treePathInfo[2][\"value\"]/treePathInfo[0][\"value\"])*100 + \"%)\" + \"<br/>\"\n                                return tooltipString\n                            }\n                            else {\n                                return \"点击返回上一层\"\n                            }\n                            \n                        }\n                    },\n                    // nodeClick:false,\n                    series: {\n                        type: 'sunburst',\n                        highlightPolicy: 'ancestor',\n                        data: graph_data,\n                        radius: [0, '95%'],\n                        sort: null,\n                        nodeClick:false,\n                        emphasis:{\n                            itemStyle:{\n                                borderColor:'rgba(190,190,190,0.3)',\n                                // shadowBlur:2,\n                                // shadowColor:'rgba(91,91,91,0.5)'\n                            }\n                        },\n                        levels: [{},\n                            {\n                            r0: '0%',\n                            r: '35%',\n                            itemStyle: {\n                                borderWidth: 2\n                            },\n                            label: {\n                                rotate: 'tangential'  // 标签文字是垂直于半径摆放 | 默认是按平行于半径摆放\n                            }\n                        }, {\n                            r0: '40%',\n                            r: '48%',\n                            label: {\n                                //align: 'right',\n                                position:'outside',\n                                padding:3\n                            },\n                            itemStyle:{\n                                borderWidth:4\n                            }\n                        }]\n                    },\n                    //color: [\"#60acfc\",\"#32d3eb\",\"#5bc49f\",\"#feb64d\",\"#ff7c7c\",\"#9287e7\"]\n                };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    // console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    // $router.push({\n                    //     path:\"/displayInfo\",\n                    //     query:{query:params.data.name.toLowerCase()}\n                    // })\n                    let query = params.data.name.toLowerCase()\n                    $search.to_display(query)\n                })\n            },\n            // set_color(){\n            //     let testcolor = [\"rgb(129, 212, 250)\",\"rgb(239, 154, 154)\",\"rgb(128, 203, 196)\",\"rgb(129, 199, 132)\",\"rgb(156, 204, 101)\",\"rgb(212, 225, 87)\",\"rgb(255, 213, 79)\",\"rgb(255, 167, 38)\",\"rgb(255, 110, 64)\",\"rgb(161, 136, 127)\",\"rgb(248, 187, 208)\",\"rgb(128, 203, 196)\",\"rgb(209, 196, 233)\"]\n            //     let num = Math.floor(Math.random() * testcolor.length);\n            //     return testcolor[num]\n            // }\n        }\n    }\n</script>\n<style>\n  .graph {\n    width: 100%;\n    min-height: 300px;\n    /* height: 400px; */\n  }\n  .tabs {\n      box-shadow:0 2px 4px 0 rgba(0,0,0,0.1), 0 3px 10px 0 rgba(0,0,0,0.15);\n      padding:10px;\n      /* border-radius: 5px; */\n  }\n</style>"]}]}