{"remainingRequest":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/var/www/html/ai-project/src/components/graphs/graph_geo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/ai-project/src/components/graphs/graph_geo.vue","mtime":1551450006375},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// 直接导入地理图所需的json文件，注意一定记得register这个文件\nimport worldJson from 'echarts/map/json/world.json'\nimport $router from '../../util/router' \n\n    let echarts = require('echarts');\n    export default {\n        name: \"geo\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_geo(id,itemData[i]);\n                }\n            },\n            draw_geo(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                    \n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n                // let color = this.set_color();\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n                let geoCoordMap = graph_data[\"location\"];\n                let influ = graph_data[\"influence\"];\n                // console.log(\"influnce===\"+JSON.stringify(influence.length))\n\n                // registerMap地理图json文件\n                echarts.registerMap('world', worldJson);\n                let influence = influ.sort(this.$graphs.sortNumber).slice(-100);\n\n                let convertData = [];\n                for (var i = 0; i < influence.length; i++) {\n                    var geoCoord = geoCoordMap[influence[i].name];\n                    if (geoCoord) {\n                        convertData.push({\n                            name: influence[i].name,\n                            value: geoCoord.concat(influence[i].value)\n                        });\n                    }\n                }\n                // console.log(\"convertData====\"+JSON.stringify(convertData));\n                console.log(convertData)\n                let data_max = 1;\n                let data_min = 100000;\n                for (var i = 0; i < convertData.length; i++) {\n                    if (convertData[i]['value'][2] > data_max){\n                        data_max = convertData[i]['value'][2];\n                    };\n                    if (convertData[i]['value'][2]< data_min){\n                        data_min = convertData[i]['value'][2];\n                    }\n                };\n                console.log(data_max+','+data_min)\n                const option = {\n                    title: {\n                        text: title,\n                        top: 'top',\n                        // left: 'center'\n                    },\n                    tooltip: {\n                        trigger: 'item',\n                        formatter: function (data) {\n                        if (data.seriesName == 'a'){\n                            return data.marker + data.name + '：' + data.value[2];\n                        }\n                        return data.seriesName + '<br/>' +data.marker + data.name + '：' + data.value[2];\n                        }\n                    },\n                    toolbox: {\n                        show: false,\n                        orient: 'vertical',\n                        x: 'right',\n                        y: 'center',\n                        feature: {\n                            mark: { show: true },\n                            dataView: { show: true, readOnly: false },\n                            restore: { show: true },\n                            saveAsImage: { show: true }\n                        }\n                    },\n                    visualMap: {\n                        min: data_min,\n                        max: data_max,\n                        calculable: true,\n                        inRange: {\n                            // color: ['rgba(231, 219, 195,0.9)', 'rgba(224, 31, 84,0.9)']\n                            color: ['#BBDEFB', '#1565C0'],\n                        },\n                        textStyle: {\n                            // color: '#E01F54'\n                            color: '#4E4E4E'\n                        },\n                        left: '5%',\n                        bottom: '10%'\n                    },\n                    geo: {\n                        map: 'world',\n                        roam: true,\n                        zoom:1.4,\n                        label: {\n                            emphasis: {\n                                show: false\n                            }\n                        },\n                        itemStyle: {\n                            normal: {\n                                // areaColor: '#f3f3f3',\n                                areaColor:\"#ffffff\",\n                                // borderColor: '#111'\n                                borderColor: '#C0B9B9'\n                            },\n                            emphasis: {\n                                // areaColor: 'rgba(224, 31, 84, 0.2)'\n                                areaColor: \"#60acfc\",\n                            }\n                        }\n                    },\n                    series: [\n                        {\n                            name: 'Top 100',\n                            type: 'effectScatter',\n                            coordinateSystem: 'geo',\n                            // data: convertData(influence.sort(function (a, b) {\n                            //     return b.value - a.value;\n                            // }).slice(0,10)),         \n                            data: convertData,\n                            symbol: 'pin',\n                            symbolSize: function (val) {\n                                // console.log(JSON.stringify(val));\n                                return 10 + (val[2]-data_min)/(data_max - data_min)*50;\n                            },\n                            showEffectOn: 'render',\n                            rippleEffect: {\n                                brushType: 'fill',\n                                scale: 1.1\n                            },\n                            hoverAnimation: true,\n                            label: {\n                                normal: {\n                                    formatter: '{b}',\n                                    position: 'top',\n                                    show: false,\n                                    // color:'rgb(224,31,84)'\n                                    color: \"#4E4E4E\",\n                                },\n                                emphasis:{\n                                    formatter:'{b}',\n                                    position:'top',\n                                    show:true,\n                                    color:\"#4E4E4E\"\n                                }\n                            },\n                            itemStyle: {\n                                normal: {\n                                    // color: 'rgb(224, 31, 84)',\n                                    color: \"#60acfc\",\n                                    shadowBlur: 10,\n                                    shadowColor: '#333'\n                                }\n                            },\n                            zlevel: 1\n                        }\n                    ]\n                \n                };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    // console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    // this.click(params.seriesName);\n                    $router.push({\n                        path:'/diaplayInfo',\n                        query:{query:params.data.name}\n                    })\n\n                })\n            },\n            // click(query){\n            //     this.$router.push({\n            //         path:\"/displayInfo\",\n            //         query:{wd:query}\n            //     })\n            // }\n        }\n    }\n",{"version":3,"sources":["graph_geo.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"graph_geo.vue","sourceRoot":"src/components/graphs","sourcesContent":["<template>\n<div>\n    <el-tabs type=\"border-card\">\n    <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n        <!-- <p>{{index}},{{items[index][\"title\"]}}</p> -->\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n    </el-tab-pane>\n</el-tabs>\n</div>\n</template>\n<script>\n// 直接导入地理图所需的json文件，注意一定记得register这个文件\nimport worldJson from 'echarts/map/json/world.json'\nimport $router from '../../util/router' \n\n    let echarts = require('echarts');\n    export default {\n        name: \"geo\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_geo(id,itemData[i]);\n                }\n            },\n            draw_geo(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                    \n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n                // let color = this.set_color();\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n                let geoCoordMap = graph_data[\"location\"];\n                let influ = graph_data[\"influence\"];\n                // console.log(\"influnce===\"+JSON.stringify(influence.length))\n\n                // registerMap地理图json文件\n                echarts.registerMap('world', worldJson);\n                let influence = influ.sort(this.$graphs.sortNumber).slice(-100);\n\n                let convertData = [];\n                for (var i = 0; i < influence.length; i++) {\n                    var geoCoord = geoCoordMap[influence[i].name];\n                    if (geoCoord) {\n                        convertData.push({\n                            name: influence[i].name,\n                            value: geoCoord.concat(influence[i].value)\n                        });\n                    }\n                }\n                // console.log(\"convertData====\"+JSON.stringify(convertData));\n                console.log(convertData)\n                let data_max = 1;\n                let data_min = 100000;\n                for (var i = 0; i < convertData.length; i++) {\n                    if (convertData[i]['value'][2] > data_max){\n                        data_max = convertData[i]['value'][2];\n                    };\n                    if (convertData[i]['value'][2]< data_min){\n                        data_min = convertData[i]['value'][2];\n                    }\n                };\n                console.log(data_max+','+data_min)\n                const option = {\n                    title: {\n                        text: title,\n                        top: 'top',\n                        // left: 'center'\n                    },\n                    tooltip: {\n                        trigger: 'item',\n                        formatter: function (data) {\n                        if (data.seriesName == 'a'){\n                            return data.marker + data.name + '：' + data.value[2];\n                        }\n                        return data.seriesName + '<br/>' +data.marker + data.name + '：' + data.value[2];\n                        }\n                    },\n                    toolbox: {\n                        show: false,\n                        orient: 'vertical',\n                        x: 'right',\n                        y: 'center',\n                        feature: {\n                            mark: { show: true },\n                            dataView: { show: true, readOnly: false },\n                            restore: { show: true },\n                            saveAsImage: { show: true }\n                        }\n                    },\n                    visualMap: {\n                        min: data_min,\n                        max: data_max,\n                        calculable: true,\n                        inRange: {\n                            // color: ['rgba(231, 219, 195,0.9)', 'rgba(224, 31, 84,0.9)']\n                            color: ['#BBDEFB', '#1565C0'],\n                        },\n                        textStyle: {\n                            // color: '#E01F54'\n                            color: '#4E4E4E'\n                        },\n                        left: '5%',\n                        bottom: '10%'\n                    },\n                    geo: {\n                        map: 'world',\n                        roam: true,\n                        zoom:1.4,\n                        label: {\n                            emphasis: {\n                                show: false\n                            }\n                        },\n                        itemStyle: {\n                            normal: {\n                                // areaColor: '#f3f3f3',\n                                areaColor:\"#ffffff\",\n                                // borderColor: '#111'\n                                borderColor: '#C0B9B9'\n                            },\n                            emphasis: {\n                                // areaColor: 'rgba(224, 31, 84, 0.2)'\n                                areaColor: \"#60acfc\",\n                            }\n                        }\n                    },\n                    series: [\n                        {\n                            name: 'Top 100',\n                            type: 'effectScatter',\n                            coordinateSystem: 'geo',\n                            // data: convertData(influence.sort(function (a, b) {\n                            //     return b.value - a.value;\n                            // }).slice(0,10)),         \n                            data: convertData,\n                            symbol: 'pin',\n                            symbolSize: function (val) {\n                                // console.log(JSON.stringify(val));\n                                return 10 + (val[2]-data_min)/(data_max - data_min)*50;\n                            },\n                            showEffectOn: 'render',\n                            rippleEffect: {\n                                brushType: 'fill',\n                                scale: 1.1\n                            },\n                            hoverAnimation: true,\n                            label: {\n                                normal: {\n                                    formatter: '{b}',\n                                    position: 'top',\n                                    show: false,\n                                    // color:'rgb(224,31,84)'\n                                    color: \"#4E4E4E\",\n                                },\n                                emphasis:{\n                                    formatter:'{b}',\n                                    position:'top',\n                                    show:true,\n                                    color:\"#4E4E4E\"\n                                }\n                            },\n                            itemStyle: {\n                                normal: {\n                                    // color: 'rgb(224, 31, 84)',\n                                    color: \"#60acfc\",\n                                    shadowBlur: 10,\n                                    shadowColor: '#333'\n                                }\n                            },\n                            zlevel: 1\n                        }\n                    ]\n                \n                };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    // console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    // this.click(params.seriesName);\n                    $router.push({\n                        path:'/diaplayInfo',\n                        query:{query:params.data.name}\n                    })\n\n                })\n            },\n            // click(query){\n            //     this.$router.push({\n            //         path:\"/displayInfo\",\n            //         query:{wd:query}\n            //     })\n            // }\n        }\n    }\n</script>\n<style>\n</style>"]}]}