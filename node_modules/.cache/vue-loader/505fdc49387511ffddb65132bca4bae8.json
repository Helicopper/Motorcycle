{"remainingRequest":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/ssd1/gfy/ai-project/src/components/display_info/DisplayVisual2_f11_bar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/ssd1/gfy/ai-project/src/components/display_info/DisplayVisual2_f11_bar.vue","mtime":1590640390000},{"path":"/ssd1/gfy/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":1574947019000},{"path":"/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018000},{"path":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":1574947026000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n  import Vue from 'vue'\n  import bar from \"../graphs/graph_bar.vue\"\n  //import geo from \"../graphs/graph_geo.vue\"\n  //import tree from \"../graphs/graph_tree.vue\"\n  //import pie from \"../graphs/graph_pie.vue\"\n export default {\n  name: \"DisplayVisual_f11_bar\",\n  data() {\n      return {\n        // iftree: true\n      }\n    },\n  mounted() {\n      // 生成可视化图表\n      // this.generate_charts();\n    },\n  computed: {\n      graph_data() {\n        return this.$bus.get_result_graph();\n      },\n    },\n   \n    /*\n    还需要优化的问题：\n    1. 按需加载图表组件，不要一次性导入全部组件。异步组件\n    */\n    \n\tupdated: function() {\n      // generate_charts需要在dom元素更新之后才能调用，故使用updated，而不是用mounted\n      this.generate_charts(); \n\t\t\tconsole.log('更新成功啦!');\n    },\n\n  methods: { \n      // 生成所有图\n    generate_charts() { \n        // 获取可视化数据\n\t\t\t\tlet visual_data = this.$bus.get_result_graph();\n        // 获得每一个图的数据，调用图表组件，传入数据\n        let key = 'bar_whole_price';\n          // console.log(key)\n          // 调用constructor\n\t\t\t\tlet ifUnknown = JSON.stringify(visual_data[key]);\n        console.log(ifUnknown);\n        console.log(ifUnknown.indexOf('\"data\":\"UNKNOWN\"'));\n          // data数据存在\n\t\t\t\t\t\n        if(ifUnknown.indexOf('\"data\":\"UNKNOWN\"') === -1){ \n              if (this.typeOf(key)){\n                // console.log(\"key==\"+key+\",visual_data[key]==\"+visual_data[key]);\n                // 调用construct_graph方法，传入key和data\n                this.construct_graph(key,visual_data[key]);\n              }\n          }\n\t\t\t\t\telse { // data数据不存在\n            console.log(\"===================================\");\n            console.log(key+\"图的data数据为unknown\");\n            console.log(\"===================================\");\n          }\n      },\n      // 构造图组件子类，实现挂载\n\n    construct_graph(keyString, data) {\n        // Vue.extend全局API，组件构造器，必须要import Vue才能使用\n        let component_subclass = Vue.extend(this.typeOf(keyString));\n\t\t\t\tconsole.log(this.typeOf(keyString));\n        // new一个子类，实现挂载\n        new component_subclass({\n          // propsData：数据传输管道，将图的数据传给调用的组件\n          propsData:{\n            items: data,\n            keyWord: keyString\n          }\n          //$mount方法将构造器返回的\"未挂载的\"组件\"graph_linefold\"挂载到相应id的挂载点\n        }).$mount(\"#\" + keyString);\n      },\n\n      // 查询key对应需要的组件\n\t\ttypeOf(keyString){\n        // 所有图的key，用数字表示图的类型。\n        let keyType = {\n          \"bar_whole_price\":bar\n\t\t\t\t}\n\t\t\t\treturn keyType[keyString];\n    }\n  },\n  components: {\n      \"bar_whole_price\": bar\n    }\n  }\n\n",{"version":3,"sources":["DisplayVisual2_f11_bar.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DisplayVisual2_f11_bar.vue","sourceRoot":"src/components/display_info","sourcesContent":["<template>\n  <div class=\"display-visual\">\n\n    <!--根据数据循环生成所有的图的挂载点-->\n    <div class=\"display-graph\" v-for=\"(graphData, index) in graph_data\" :key=index>\n      <!-- <div :id=\"index\">图形id：{{index}}。这个图形还未完成  请期待......</div>  -->\n      <div :id=\"index\"></div>\n    </div>\n\n  </div>\n</template>\n<script>\n  import Vue from 'vue'\n  import bar from \"../graphs/graph_bar.vue\"\n  //import geo from \"../graphs/graph_geo.vue\"\n  //import tree from \"../graphs/graph_tree.vue\"\n  //import pie from \"../graphs/graph_pie.vue\"\n export default {\n  name: \"DisplayVisual_f11_bar\",\n  data() {\n      return {\n        // iftree: true\n      }\n    },\n  mounted() {\n      // 生成可视化图表\n      // this.generate_charts();\n    },\n  computed: {\n      graph_data() {\n        return this.$bus.get_result_graph();\n      },\n    },\n   \n    /*\n    还需要优化的问题：\n    1. 按需加载图表组件，不要一次性导入全部组件。异步组件\n    */\n    \n\tupdated: function() {\n      // generate_charts需要在dom元素更新之后才能调用，故使用updated，而不是用mounted\n      this.generate_charts(); \n\t\t\tconsole.log('更新成功啦!');\n    },\n\n  methods: { \n      // 生成所有图\n    generate_charts() { \n        // 获取可视化数据\n\t\t\t\tlet visual_data = this.$bus.get_result_graph();\n        // 获得每一个图的数据，调用图表组件，传入数据\n        let key = 'bar_whole_price';\n          // console.log(key)\n          // 调用constructor\n\t\t\t\tlet ifUnknown = JSON.stringify(visual_data[key]);\n        console.log(ifUnknown);\n        console.log(ifUnknown.indexOf('\"data\":\"UNKNOWN\"'));\n          // data数据存在\n\t\t\t\t\t\n        if(ifUnknown.indexOf('\"data\":\"UNKNOWN\"') === -1){ \n              if (this.typeOf(key)){\n                // console.log(\"key==\"+key+\",visual_data[key]==\"+visual_data[key]);\n                // 调用construct_graph方法，传入key和data\n                this.construct_graph(key,visual_data[key]);\n              }\n          }\n\t\t\t\t\telse { // data数据不存在\n            console.log(\"===================================\");\n            console.log(key+\"图的data数据为unknown\");\n            console.log(\"===================================\");\n          }\n      },\n      // 构造图组件子类，实现挂载\n\n    construct_graph(keyString, data) {\n        // Vue.extend全局API，组件构造器，必须要import Vue才能使用\n        let component_subclass = Vue.extend(this.typeOf(keyString));\n\t\t\t\tconsole.log(this.typeOf(keyString));\n        // new一个子类，实现挂载\n        new component_subclass({\n          // propsData：数据传输管道，将图的数据传给调用的组件\n          propsData:{\n            items: data,\n            keyWord: keyString\n          }\n          //$mount方法将构造器返回的\"未挂载的\"组件\"graph_linefold\"挂载到相应id的挂载点\n        }).$mount(\"#\" + keyString);\n      },\n\n      // 查询key对应需要的组件\n\t\ttypeOf(keyString){\n        // 所有图的key，用数字表示图的类型。\n        let keyType = {\n          \"bar_whole_price\":bar\n\t\t\t\t}\n\t\t\t\treturn keyType[keyString];\n    }\n  },\n  components: {\n      \"bar_whole_price\": bar\n    }\n  }\n\n</script>\n\n<style>\n\n</style>\n"]}]}