{"remainingRequest":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/ssd1/gfy/ai-project/src/components/graphs/graph_relation.vue?vue&type=style&index=0&id=00e7762b&scoped=true&lang=css&","dependencies":[{"path":"/ssd1/gfy/ai-project/src/components/graphs/graph_relation.vue","mtime":1582181841000},{"path":"/ssd1/gfy/ai-project/node_modules/_css-loader@1.0.1@css-loader/index.js","mtime":1574947025000},{"path":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/stylePostLoader.js","mtime":1574947006000},{"path":"/ssd1/gfy/ai-project/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":1574947004000},{"path":"/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018000},{"path":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":1574947026000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.graph {\n  width: 100%;\n  min-height: 300px;\n  /* max-height: 400px; */\n}\n\n.tabs {\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1), 0 3px 10px 0 rgba(0, 0, 0, 0.15);\n  padding: 10px;\n  /* border-radius: 5px; */\n}\n",{"version":3,"sources":["graph_relation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkPA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"graph_relation.vue","sourceRoot":"src/components/graphs","sourcesContent":["// 关系图\n<template>\n  <div>\n    <el-tabs type=\"border-card\">\n      <el-tab-pane v-for=\"(data, index) in items\" :key=index :label=\"index\">\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n      </el-tab-pane>\n    </el-tabs>\n  </div>\n</template>\n<script>\n  import $search from \"./../../util/search.js\"\n  import $graphs from \"./../../util/drawGraphs.js\"\n  let echarts = require('echarts');\n\n  export default {\n    name: \"relation\",\n    props: {\n      items: {\n        type: Object,\n        default () {\n          return {\n            \"test\": \"test\"\n          }\n        }\n      },\n      keyWord: {\n        type: String,\n        default () {\n          return \"keyString\"\n        }\n      }\n    },\n    data() {\n      return {\n        // graph_title: \"专家合作网络\"\n      }\n    },\n    mounted() {\n      this.start_draw();\n    },\n    methods: {\n      start_draw() {\n        let itemData = this.items;\n        for (var i in itemData) {\n          console.log(\"key :\" + this.keyWord + \"_\" + i);\n          let id = this.keyWord + \"_\" + i;\n          this.draw_relation(id, itemData[i]);\n        }\n      },\n      draw_relation(id, graph_data) {\n        let graph_title = graph_data.title;\n        let data = graph_data.data;\n\t\tvar bidword = graph_data.bidword;\n        // 专家信息\n        let graph_detail = graph_data.detail;\n\n        // 初始化\n        let chart = document.getElementById(id);\n\n        var initial = function () {\n          let chartParent = chart.parentNode.parentNode;\n          chart.style.width = chartParent.clientWidth - 30 + \"px\";\n          chart.style.margin = \"0 auto\";\n          chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n          // chart.style.height = (chartParent.clientHeight) + \"px\";\n        }\n        initial();\n\n        // 数据中点的个数\n        let nodes = data.node;\n        let node_num = nodes.length;\n\n        // 色盘\n        // let colors = [\"#D53A35\", \"#334B5C\", \"#D48265\", \"#9FDABF\",\"#8E8DBE\", \"#7A306C\", \"#7FAE90\", \"#DE9325\", \"#CFB2A9\", \"#797B7F\"]\n        // let colors = [ \"rgba(90, 125, 124, 1)\", \"#12569B\",\"#DE9325\", \"#CFB2A9\", \"#797B7F\"]\n        let colors = [\"rgba(255,99,132,0.8)\",  \"rgba(75,192,192,0.8)\", \"rgba(153,102,255,0.8)\",  \"rgba(255,206,86,0.8)\", \"rgba(54,162,235,0.8)\",\"rgba(255,159,64,0.8)\"]\n        // let colors = [\"rgba(93, 97, 140, 1)\", \"rgba(242, 153, 68, 1)\", \"rgba(146, 94, 136, 1)\", \"rgba(141, 161, 185, 1)\", \"rgba(153, 151, 174, 1)\"]\n\n        // echarts 实例初始化\n        let myChart = echarts.init(chart);\n\n        // 计算节点大小\n        let min_size = myChart.getWidth() / node_num * 0.8;\n        let max_size = myChart.getWidth() / node_num * 4;\n        let minus = max_size - min_size;\n\n        let option = {\n          title: {\n            text: graph_title\n          },\n          animationDurationUpdate: 1500,\n          animationEasingUpdate: 'quinticInOut',\n          toolbox: {\n            show: true,\n            feature: {\n              saveAsImage: {\n                show: true,\n                type: \"png\",\n                pixelRatio: 3\n              },\n              restore: {\n                show: true,\n              }\n            }\n          },\n          tooltip:{\n            show: true\n          },\n          series: [{\n            type: 'graph',\n            // --------------------------\n            // 布局类型\n            layout: \"none\",\n             //layout: 'circular',\n             //circular: {\n              // rotateLabel: true,\n            // },\n          //  layout: 'force',\n           // force: {\n            //  initLayout: \"circular\",\n              // 斥力\n             // repulsion: 300,\n             // gravity: 0.25,\n              // edgeLength: [(myChart.getWidth()/node_num), (myChart.getWidth() / node_num +200)]\n            // edgeLength: [(myChart.getWidth()/12)+min_size, (myChart.getWidth()/8)+min_size]\n            //},\n            // --------------------------\n\n            // 位置\n            top: \"15%\",\n            bottom: \"10%\",\n            right: \"15%\",\n            left: \"15%\",\n            progressiveThreshold: 500,\n            roam: true,\n            focusNodeAdjacency: true,\n            // 点的数据  ---------------------------------\n            data: data.node.map(function (node, index) {\n\n              let symbolSize = min_size + (node.value / 100 * minus);\n              let color_index = ((node.value/10) > colors.length)? ((node.value/10)%colors.length) : (node.value/10);\n              color_index = parseInt(color_index)\n\n              return {\n                name: node.name,\n                value: node.value,\n                symbolSize: symbolSize,\n                // symbolSize: node_num>20 ? (chart.parentNode.parentNode.clientWidth / 17) : (chart.parentNode.parentNode.clientWidth / 10),\n                itemStyle: {\n                  color: colors[color_index],\n                  opacity: 0.9\n                },\n                tooltip: {\n                  position: [\"1%\", \"8%\"],\n                  formatter: function (params) {\n                    if (params.dataType === \"edge\") {\n                      return params.data.source + \" + \" + params.data.target;\n                    } else if (params.dataType === \"node\") {\n                      return $graphs.get_detail(node.name, graph_detail)\n                    }\n                  }\n                }\n              };\n            }),\n            // 边的数据  ---------------------------------\n            links: data.link.map(function (link) {\n              return {\n                source: link.source,\n                target: link.target\n              };\n            }),\n            // 边两端标记\n            edgeSymbol: ['none', 'none'],\n            edgeSymbolSize: 5,\n            label: {\n              show: true,\n              position: \"right\",\n              color: \"#000\"\n            },\n            lineStyle: {\n              width: 1,\n              curveness: 0.3,\n              opacity: 0.9\n            },\n            // 强调样式\n            emphasis: {\n              label: {\n                show: true,\n                position: 'inside',\n                fontSize: 18,\n                fontWeight: \"bold\",\n                color: \"#000\",\n                textBorderColor: \"#fff\",\n                textBorderWidth: 2\n              },\n              itemStyle: {\n                shadowColor: 'rgba(0, 0, 0, 0.5)',\n                shadowBlur: 5,\n                opacity: 1\n              },\n              lineStyle: {\n                width: 1.5,\n                color: \"#000\",\n                opacity: 1,\n                // shadowColor: 'rgba(0, 0, 0, 0.7)',\n                // shadowBlur: 5,\n              },\n              edgeLabel: {\n                show: false,\n                color: \"#000\",\n                // formatter: function (params) {\n                //   return params.data.source + \"-->\" + params.data.target;\n                // }\n              }\n            }\n          }]\n        };\n\n        myChart.setOption(option);\n\n        window.addEventListener('resize', function () {\n          initial();\n          // chart.style.width = this.initial_style(chart);\n          myChart.resize()\n        })\n\n        myChart.on(\"click\", function (params) {\n          if (params.dataType === \"node\") {\n            // $router.push({\n            //   path: \"/displayInfo\",\n            //   query: {query: params.data.name}\n            // })\n            $search.to_display(\"3,\"+bidword+\",\"+params.data.name)\n          }\n        })\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .graph {\n    width: 100%;\n    min-height: 300px;\n    /* max-height: 400px; */\n  }\n\n  .tabs {\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1), 0 3px 10px 0 rgba(0, 0, 0, 0.15);\n    padding: 10px;\n    /* border-radius: 5px; */\n  }\n</style>\n"]}]}