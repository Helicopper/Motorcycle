{"remainingRequest":"/home/ky02/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/home/ky02/ai-project/src/components/graphs/graph_pieline.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ky02/ai-project/src/components/graphs/graph_pieline.vue","mtime":1574946998953},{"path":"/home/ky02/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018363},{"path":"/home/ky02/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":1574947019787},{"path":"/home/ky02/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018363},{"path":"/home/ky02/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":1574947026300}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport $search from \"./../../util/search.js\"\nlet echarts = require('echarts');\nexport default {\n    name: \"radar\",\n    props: {\n        items: {\n            type: Object,\n            default () {\n                return {\n                    \"test\": \"test\"\n                }\n            }\n        },\n        keyWord: {\n            type:String,\n            default() {\n                return \"test\"\n            }\n        }\n    },\n    data() {\n        return {\n            // tabItem:\"Paper\"\n        }\n    },\n    mounted() {\n        this.start_draw();\n    },\n    // watch:{\n    //     items:function() {\n    //         // this.draw_linefold();\n    //         console.log(\"watch items:\"+ items);\n    //     },\n    //     deep:true\n    // },\n    // updated:function() {\n    //     this.$nextTick(function(){\n    //         console.log(\"updated!\");\n    //         this.start_draw();\n    //     })\n    // },\n    methods: {\n        start_draw() {\n            // let key = [];\n            // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n            let itemData = this.items;\n            // console.log(\"itemData=\"+JSON.stringify(itemData));\n            for (var i in itemData){\n                // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                let id = this.keyWord+\"_\"+i;\n                // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                this.draw_radar(id,itemData[i]);\n            }\n        },\n        draw_radar(id,data) {\n            let chart = document.getElementById(id);\n            var initial = function () {\n                // 根据想要的效果调整的公式，不是固定的\n                // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                \n                // 获取 chart 的父父结点chartParent，再根据其算宽度\n                let chartParent = chart.parentNode.parentNode;\n                chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                chart.style.margin = \"0 auto\";\n                chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n            }\n            initial();\n\n            let myChart = echarts.init(chart);\n            let title = data['title'];\n            let graph_data = data['data'];\n            var source = []; //赋值给echarts的source\n            var series = []; //赋值给echarts的series\n            var xAxis = ['item']; //source中的第一行数据\n            var sourceInstance = []; //source中的除了第一行的其他数据\n            var j=0; //计数器\n            var formatter = '';\n            for (var key in graph_data){\n                //console.log('for start!');\n                //console.log(sourceInstance);\n                if(j!=0){source.push(sourceInstance);}\n                sourceInstance = [];\n                sourceInstance.push(key);\n                var subdata = graph_data[key];\n                for (var i in subdata){\n                    if(j==0){xAxis.push(i);}\n                    sourceInstance.push(subdata[i]);\n                }\n                if(j==0){source.push(xAxis);formatter='{b}:{@'+xAxis[1]+'}({d}%)'}\n                j++;\n                series.push(\n                    {type: 'line', smooth: true, seriesLayoutBy: 'row'}\n                )\n            }\n                series.push({\n                    type:'pie',\n                    id:'pie',\n                    radius:'30%',\n                    center:['50%','35%'],\n                    label:{\n                        //formatter : '{b}:{@2012}({d}%)';\n                        formatter:formatter\n                    },\n                    encode:{\n                        itemName:'item',\n                        value:xAxis[1],\n                        tooltip:xAxis[1]\n                    }\n                })\n\n            const option = {\n                title:{\n                    text:title,\n                    top:\"0%\"\n                },\n                legend: {\n                    type:\"scroll\",\n                    top:\"8%\",\n                    left:\"1%\",\n                  // orient:\"vertical\"\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    showContent: true\n                },\n                dataset: {\n                    //source: [\n                    //    ['product', '2012', '2013', '2014', '2015', '2016', '2017'],\n                    //    ['Matcha Latte', 41.1, 30.4, 65.1, 53.3, 83.8, 98.7],\n                    //    ['Milk Tea', 86.5, 92.1, 85.7, 83.1, 73.4, 55.1],\n                    //    ['Cheese Cocoa', 24.1, 67.2, 79.5, 86.4, 65.2, 82.5],\n                    //    ['Walnut Brownie', 55.2, 67.1, 69.2, 72.4, 53.9, 39.1]\n                    //]\n                    source:source\n                },\n                xAxis: {type: 'category',boundaryGap: false},\n                yAxis: {gridIndex: 0},\n                grid: {\n                  top: '62%',\n                  bottom:\"5%\"\n                },\n                //series: [\n                    //{type: 'line', smooth: true, seriesLayoutBy: 'row'},\n                    //{type: 'line', smooth: true, seriesLayoutBy: 'row'},\n                    //{type: 'line', smooth: true, seriesLayoutBy: 'row'},\n                    //{type: 'line', smooth: true, seriesLayoutBy: 'row'},\n                    //{\n                    //    type: 'pie',\n                    //    id: 'pie',\n                    //    radius: '30%',\n                    //    center: ['50%', '25%'],\n                    //    label: {\n                    //        formatter: '{b}: {@2012} ({d}%)'\n                    //    },\n                    //    encode: {\n                    //    itemName: 'product',\n                    //        value: '2012',\n                    //        tooltip: '2012'\n                    //    }\n                    //}\n\n                //]\n                series:series,\n                color: [\"#60acfc\",\"#32d3eb\",\"#5bc49f\",\"#feb64d\",\"#ff7c7c\",\"#9287e7\"]\n            };\n        \n            myChart.on('updateAxisPointer', function (event) {\n                var xAxisInfo = event.axesInfo[0];\n                if (xAxisInfo) {\n                    var dimension = xAxisInfo.value + 1;\n                    myChart.setOption({\n                        series: {\n                            id: 'pie',\n                            label: {\n                                formatter: '{b}: {@[' + dimension + ']} ({d}%)'\n                            },\n                            encode: {\n                                value: dimension,\n                                tooltip: dimension\n                            }\n                        }\n                    });\n                }\n            });\n\n            myChart.setOption(option);\n\n            // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n            // window.onresize = function(){\n            //     console.log(\"window resize!\")\n            //     initial();\n            //     myChart.resize();\n            //     console.log(\"myChart resize!\")\n            // }\n\n            // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n            window.addEventListener('resize', function () {\n                initial();\n                myChart.resize()\n            })\n\n            // 这种写法无法实现自适应，不知道为什么\n            // window.onresize = (\"resize\",function() {\n            //     initial();\n            //     echart.resize()\n            // })\n            myChart.on(\"click\",function(params){\n                console.log(params);\n                // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                if(params['componentSubType'] == 'pie'){\n                    // $router.push({\n                    //     path:\"/displayInfo\",\n                    //     query:{query:params['name'].toLowerCase()}\n                    // })\n                    $search.to_display(params['name'].toLowerCase())\n                }\n                if(params['componentSubType'] == 'line'){\n                    // $router.push({\n                    //     path:\"/displayInfo\",\n                    //     query:{query:params['seriesName'].toLowerCase()}\n                    // })\n                    $search.to_display(params['seriesName'].toLowerCase())\n                }\n            })\n        },\n        // set_color(){\n        //     let testcolor = [\"rgb(129, 212, 250)\",\"rgb(239, 154, 154)\",\"rgb(128, 203, 196)\",\"rgb(129, 199, 132)\",\"rgb(156, 204, 101)\",\"rgb(212, 225, 87)\",\"rgb(255, 213, 79)\",\"rgb(255, 167, 38)\",\"rgb(255, 110, 64)\",\"rgb(161, 136, 127)\",\"rgb(248, 187, 208)\",\"rgb(128, 203, 196)\",\"rgb(209, 196, 233)\"]\n        //     let num = Math.floor(Math.random() * testcolor.length);\n        //     return testcolor[num]\n        // }\n    }\n}\n",{"version":3,"sources":["graph_pieline.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"graph_pieline.vue","sourceRoot":"src/components/graphs","sourcesContent":["<template>\n<div>\n    <el-tabs type=\"border-card\">\n    <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n        <!-- <p>{{index}},{{items[index][\"title\"]}}</p> -->\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n    </el-tab-pane>\n</el-tabs>\n</div>\n</template>\n<script>\n    import $search from \"./../../util/search.js\"\n    let echarts = require('echarts');\n    export default {\n        name: \"radar\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_radar(id,itemData[i]);\n                }\n            },\n            draw_radar(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                    \n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n                var source = []; //赋值给echarts的source\n                var series = []; //赋值给echarts的series\n                var xAxis = ['item']; //source中的第一行数据\n                var sourceInstance = []; //source中的除了第一行的其他数据\n                var j=0; //计数器\n                var formatter = '';\n                for (var key in graph_data){\n                    //console.log('for start!');\n                    //console.log(sourceInstance);\n                    if(j!=0){source.push(sourceInstance);}\n                    sourceInstance = [];\n                    sourceInstance.push(key);\n                    var subdata = graph_data[key];\n                    for (var i in subdata){\n                        if(j==0){xAxis.push(i);}\n                        sourceInstance.push(subdata[i]);\n                    }\n                    if(j==0){source.push(xAxis);formatter='{b}:{@'+xAxis[1]+'}({d}%)'}\n                    j++;\n                    series.push(\n                        {type: 'line', smooth: true, seriesLayoutBy: 'row'}\n                    )\n                }\n                    series.push({\n                        type:'pie',\n                        id:'pie',\n                        radius:'30%',\n                        center:['50%','35%'],\n                        label:{\n                            //formatter : '{b}:{@2012}({d}%)';\n                            formatter:formatter\n                        },\n                        encode:{\n                            itemName:'item',\n                            value:xAxis[1],\n                            tooltip:xAxis[1]\n                        }\n                    })\n\n                const option = {\n                    title:{\n                        text:title,\n                        top:\"0%\"\n                    },\n                    legend: {\n                        type:\"scroll\",\n                        top:\"8%\",\n                        left:\"1%\",\n                      // orient:\"vertical\"\n                    },\n                    tooltip: {\n                        trigger: 'axis',\n                        showContent: true\n                    },\n                    dataset: {\n                        //source: [\n                        //    ['product', '2012', '2013', '2014', '2015', '2016', '2017'],\n                        //    ['Matcha Latte', 41.1, 30.4, 65.1, 53.3, 83.8, 98.7],\n                        //    ['Milk Tea', 86.5, 92.1, 85.7, 83.1, 73.4, 55.1],\n                        //    ['Cheese Cocoa', 24.1, 67.2, 79.5, 86.4, 65.2, 82.5],\n                        //    ['Walnut Brownie', 55.2, 67.1, 69.2, 72.4, 53.9, 39.1]\n                        //]\n                        source:source\n                    },\n                    xAxis: {type: 'category',boundaryGap: false},\n                    yAxis: {gridIndex: 0},\n                    grid: {\n                      top: '62%',\n                      bottom:\"5%\"\n                    },\n                    //series: [\n                        //{type: 'line', smooth: true, seriesLayoutBy: 'row'},\n                        //{type: 'line', smooth: true, seriesLayoutBy: 'row'},\n                        //{type: 'line', smooth: true, seriesLayoutBy: 'row'},\n                        //{type: 'line', smooth: true, seriesLayoutBy: 'row'},\n                        //{\n                        //    type: 'pie',\n                        //    id: 'pie',\n                        //    radius: '30%',\n                        //    center: ['50%', '25%'],\n                        //    label: {\n                        //        formatter: '{b}: {@2012} ({d}%)'\n                        //    },\n                        //    encode: {\n                        //    itemName: 'product',\n                        //        value: '2012',\n                        //        tooltip: '2012'\n                        //    }\n                        //}\n\n                    //]\n                    series:series,\n                    color: [\"#60acfc\",\"#32d3eb\",\"#5bc49f\",\"#feb64d\",\"#ff7c7c\",\"#9287e7\"]\n                };\n            \n                myChart.on('updateAxisPointer', function (event) {\n                    var xAxisInfo = event.axesInfo[0];\n                    if (xAxisInfo) {\n                        var dimension = xAxisInfo.value + 1;\n                        myChart.setOption({\n                            series: {\n                                id: 'pie',\n                                label: {\n                                    formatter: '{b}: {@[' + dimension + ']} ({d}%)'\n                                },\n                                encode: {\n                                    value: dimension,\n                                    tooltip: dimension\n                                }\n                            }\n                        });\n                    }\n                });\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    if(params['componentSubType'] == 'pie'){\n                        // $router.push({\n                        //     path:\"/displayInfo\",\n                        //     query:{query:params['name'].toLowerCase()}\n                        // })\n                        $search.to_display(params['name'].toLowerCase())\n                    }\n                    if(params['componentSubType'] == 'line'){\n                        // $router.push({\n                        //     path:\"/displayInfo\",\n                        //     query:{query:params['seriesName'].toLowerCase()}\n                        // })\n                        $search.to_display(params['seriesName'].toLowerCase())\n                    }\n                })\n            },\n            // set_color(){\n            //     let testcolor = [\"rgb(129, 212, 250)\",\"rgb(239, 154, 154)\",\"rgb(128, 203, 196)\",\"rgb(129, 199, 132)\",\"rgb(156, 204, 101)\",\"rgb(212, 225, 87)\",\"rgb(255, 213, 79)\",\"rgb(255, 167, 38)\",\"rgb(255, 110, 64)\",\"rgb(161, 136, 127)\",\"rgb(248, 187, 208)\",\"rgb(128, 203, 196)\",\"rgb(209, 196, 233)\"]\n            //     let num = Math.floor(Math.random() * testcolor.length);\n            //     return testcolor[num]\n            // }\n        }\n    }\n</script>\n<style>\n</style>"]}]}