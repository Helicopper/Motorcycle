{"remainingRequest":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/var/www/html/ai-project/src/components/graphs/graph_bar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/ai-project/src/components/graphs/graph_bar.vue","mtime":1551873133072},{"path":"/var/www/html/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport $search from \"./../../util/search.js\"\n\n    let echarts = require('echarts');\n    export default {\n        name: \"radar\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_radar(id,itemData[i]);\n                }\n            },\n            draw_radar(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n\n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n\n                let keyArr = [];\n                let seriesData = [];\n                for (let i in graph_data) {\n                //   keyArr.push(i);\n                  seriesData.push({\n                    name:i,\n                    value:graph_data[i],\n                    itemStyle:{\n                      color:this.$graphs.set_color()\n                    }\n                  });\n                }\n                // console.log(seriesData);\n                seriesData.sort(this.$graphs.sortNumber);  // sort方法对原数据进行处理，不返回新副本\n                // console.log(seriesData);\n                for (let i in seriesData) {\n                    keyArr.push(seriesData[i]['name']);\n                }\n                const option = {\n                    title:{\n                        text:title,\n                        // left:'center',\n                        top:\"0%\",\n                    },\n                    // color: ['#60acfc','#32d3eb','#5bc49f','#feb64d','#ff7c7c','#9287e7'],\n                    tooltip : {\n                        trigger: 'axis',\n                        axisPointer : {            // 坐标轴指示器，坐标轴触发有效\n                            type : 'line'        // 默认为直线，可选为：'line' | 'shadow'\n                        },\n                        formatter:function(params){\n                        //   console.log(params);\n                          let formatterString = params[0]['data']['name'] + \": \" + params[0]['data']['value'];\n                          return formatterString\n                        }\n\n                    },\n                    grid: {\n                        left: '3%',\n                        right: '4%',\n                        bottom: '3%',\n                        containLabel: true\n                    },\n                    xAxis : [\n                        {\n                            type : 'category',\n                            //data:[\"map\", \"lines\", \"bar\", \"line\", \"pie\", \"scatter\", \"candlestick\", \"radar\", \"heatmap\", \"treemap\"]\n                            data : keyArr,\n                            axisTick: {\n                                alignWithLabel: true\n                            },\n                            inverse: true,  // 反向排列 默认升序 和sortNumber方法配合使用\n                            axisLabel:{\n                                rotate:60  // 横坐标标签倾斜度\n                            }\n                        }\n                    ],\n                    yAxis : [\n                        {\n                            type : 'log'\n                        }\n                    ],\n                    series : [\n                        {\n                            name:title,\n                            type:'bar',\n                            barWidth: '60%',\n                            data:seriesData\n                        }\n                    ]\n                };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    // $router.push({\n                    //     path:\"/displayInfo\",\n                    //     query:{query:params.data.name.toLowerCase()}\n                    // })\n                    $search.to_display(params.data.name.toLowerCase())\n                })\n            }\n        }\n\n    }\n",{"version":3,"sources":["graph_bar.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"graph_bar.vue","sourceRoot":"src/components/graphs","sourcesContent":["<template>\n<div>\n    <el-tabs type=\"border-card\">\n    <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n        <!-- <p>{{index}},{{items[index][\"title\"]}}</p> -->\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n    </el-tab-pane>\n</el-tabs>\n</div>\n</template>\n<script>\nimport $search from \"./../../util/search.js\"\n\n    let echarts = require('echarts');\n    export default {\n        name: \"radar\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_radar(id,itemData[i]);\n                }\n            },\n            draw_radar(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n\n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n\n                let keyArr = [];\n                let seriesData = [];\n                for (let i in graph_data) {\n                //   keyArr.push(i);\n                  seriesData.push({\n                    name:i,\n                    value:graph_data[i],\n                    itemStyle:{\n                      color:this.$graphs.set_color()\n                    }\n                  });\n                }\n                // console.log(seriesData);\n                seriesData.sort(this.$graphs.sortNumber);  // sort方法对原数据进行处理，不返回新副本\n                // console.log(seriesData);\n                for (let i in seriesData) {\n                    keyArr.push(seriesData[i]['name']);\n                }\n                const option = {\n                    title:{\n                        text:title,\n                        // left:'center',\n                        top:\"0%\",\n                    },\n                    // color: ['#60acfc','#32d3eb','#5bc49f','#feb64d','#ff7c7c','#9287e7'],\n                    tooltip : {\n                        trigger: 'axis',\n                        axisPointer : {            // 坐标轴指示器，坐标轴触发有效\n                            type : 'line'        // 默认为直线，可选为：'line' | 'shadow'\n                        },\n                        formatter:function(params){\n                        //   console.log(params);\n                          let formatterString = params[0]['data']['name'] + \": \" + params[0]['data']['value'];\n                          return formatterString\n                        }\n\n                    },\n                    grid: {\n                        left: '3%',\n                        right: '4%',\n                        bottom: '3%',\n                        containLabel: true\n                    },\n                    xAxis : [\n                        {\n                            type : 'category',\n                            //data:[\"map\", \"lines\", \"bar\", \"line\", \"pie\", \"scatter\", \"candlestick\", \"radar\", \"heatmap\", \"treemap\"]\n                            data : keyArr,\n                            axisTick: {\n                                alignWithLabel: true\n                            },\n                            inverse: true,  // 反向排列 默认升序 和sortNumber方法配合使用\n                            axisLabel:{\n                                rotate:60  // 横坐标标签倾斜度\n                            }\n                        }\n                    ],\n                    yAxis : [\n                        {\n                            type : 'log'\n                        }\n                    ],\n                    series : [\n                        {\n                            name:title,\n                            type:'bar',\n                            barWidth: '60%',\n                            data:seriesData\n                        }\n                    ]\n                };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    // $router.push({\n                    //     path:\"/displayInfo\",\n                    //     query:{query:params.data.name.toLowerCase()}\n                    // })\n                    $search.to_display(params.data.name.toLowerCase())\n                })\n            }\n        }\n\n    }\n</script>\n<style>\n</style>"]}]}