{"remainingRequest":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/var/www/html/ai-project/src/components/display_info/DisplayVisual.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/var/www/html/ai-project/src/components/display_info/DisplayVisual.vue","mtime":1551366501505},{"path":"/var/www/html/ai-project/node_modules/_css-loader@1.0.1@css-loader/index.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.display-visual {\n}\n.display-graph {\n  margin: 1em 0;\n}\n",{"version":3,"sources":["DisplayVisual.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2JA;AACA;AACA;AACA;AACA","file":"DisplayVisual.vue","sourceRoot":"src/components/display_info","sourcesContent":["<template>\n  <div class=\"display-visual\">\n\n    <!-- <el-tabs type=\"border-card\">\n      <el-tab-pane label=\"Paper\">\n        <graph-tree\n          g-id=\"graph_tree\"\n          g-title=\"例子-树图\"\n          :g-show=\"false\">\n        </graph-tree>\n      </el-tab-pane>\n    </el-tabs> -->\n\n    <!-- <div id=\"test\"></div>\n    <p>this is above the \"visualization\" div</p> -->\n    <!-- <div id=\"visualization\"></div> -->\n\n    <!--根据数据循环生成所有的图的挂载点-->\n    <div class=\"display-graph\" v-for=\"(graphData, index) in graph_data\" :key=index>\n      <!-- <div :id=\"index\">图形id：{{index}}。这个图形还未完成  请期待......</div>  -->\n      <div :id=\"index\"></div>\n    </div>\n    <!-- <test/> -->\n\n  </div>\n</template>\n\n<script>\n  import Vue from 'vue'\n  import linefold from \"../graphs/graph_linefold.vue\"\n  import radar from \"../graphs/graph_radar.vue\"\n  import sun from \"../graphs/graph_sun.vue\"\n  import pie from \"../graphs/graph_pie.vue\"\n  import entity from \"./../graphs/graph_entity.vue\"\n  import geo from \"./../graphs/graph_geo.vue\"\n  import bar from \"./../graphs/graph_bar.vue\"\n  import pieline from \"./../graphs/graph_pieline.vue\"\n  import relation from \"./../graphs/graph_relation.vue\"\n  import river from \"./../graphs/graph_river.vue\"\n  import tree from \"./../graphs/graph_tree.vue\"\n\n  export default {\n    name: \"DisplayVisual\",\n    data() {\n      return {\n        // iftree: true\n      }\n    },\n    mounted() {\n      // 生成可视化图表\n      // this.generate_charts();\n    },\n    computed: {\n      graph_data() {\n        return this.$bus.get_result_graph();\n      },\n\n    },\n    /*\n    还需要优化的问题：\n    1. 按需加载图表组件，不要一次性导入全部组件。异步组件\n    */\n    updated: function() {\n      // generate_charts需要在dom元素更新之后才能调用，故使用updated，而不是用mounted\n      this.generate_charts(); \n    },\n    methods:{ \n      // 生成所有图\n      generate_charts() { \n\n        // 获取可视化数据\n        let visual_data = this.$bus.get_result_graph();\n\n        // 获得每一个图的数据，调用图表组件，传入数据\n        for (let key in visual_data) {\n          // console.log(key);\n          // 调用constructor\n          let ifUnknown = JSON.stringify(visual_data[key]);\n          // console.log(ifUnknown);\n          // console.log(ifUnknown.indexOf('\"data\":\"UNKNOWN\"'));\n          // data数据存在\n          if(ifUnknown.indexOf('\"data\":\"UNKNOWN\"')==-1){ \n              if (this.typeOf(key)){\n                // console.log(\"key==\"+key+\",visual_data[key]==\"+visual_data[key]);\n                // 调用construct_graph方法，传入key和data\n                this.construct_graph(key,visual_data[key]);\n              }\n          }else { // data数据不存在\n            console.log(\"===================================\");\n            console.log(key+\"图的data数据为unknown\");\n            console.log(\"===================================\");\n          }\n\n        }\n      },\n      // 构造图组件子类，实现挂载\n      construct_graph(keyString, data) {\n        // Vue.extend全局API，组件构造器，必须要import Vue才能使用\n        let component_subclass = Vue.extend(this.typeOf(keyString));\n        // new一个子类，实现挂载\n        new component_subclass({\n          // propsData：数据传输管道，将图的数据传给调用的组件\n          propsData:{\n            items: data,\n            keyWord: keyString\n          }\n          //$mount方法将构造器返回的\"未挂载的\"组件\"graph_linefold\"挂载到相应id的挂载点\n        }).$mount(\"#\" + keyString);\n      },\n\n      // 查询key对应需要的组件\n      typeOf(keyString){\n        // 所有图的key，用数字表示图的类型。\n        let keyType = {\n          \"aiTech_time\": linefold,\n          \"field_aiTech_time\": linefold,\n          \"aiTech_entity\": entity,\n          \"aiTech_ins_geo\": geo,\n          \"field_aiTech_geo\": geo,\n          \"aiTech_knowledge_tree\": tree,\n          \"ins_aiTech_themeRiver\": river,\n          \"aiTech_expert_graph\": relation,\n          \"field_expert_graph\": relation,\n          \"aiTech_field_pie\": pie,\n          \"ins_field_pie\": pie,\n          \"aiTech_subfield_pie\": sun,\n          \"field_ins_subfield_pie\": sun,\n          \"field_aiTech_radar\": radar,\n          \"ins_competition_radar\": radar,\n          \"field_prediction_barPie\": \"\",\n          \"ins_field_time_pieline\": pieline,\n          \"ins_expert_influence_bar\": bar,\n        }\n        return keyType[keyString];\n      }\n    },\n    components: {\n      \"graph_linefold\": linefold,\n      \"graph_radar\":radar,\n      \"graph_sun\":sun,\n      \"graph_pie\":pie,\n      \"graph_demand\": entity,\n      \"graph_geo\":geo,\n      \"graph_bar\":bar,\n      \"graph_pieline\":pieline,\n      \"graph_river\": river,\n      \"graph_tree\": tree\n      // 'test':function(resolve) {\n      //   require(['../test.vue'],resolve);\n    }\n  }\n\n</script>\n\n<style>\n.display-visual {\n}\n.display-graph {\n  margin: 1em 0;\n}\n</style>"]}]}