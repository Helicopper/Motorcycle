{"remainingRequest":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/var/www/html/ai-project/src/components/graphs/graph_entity.vue?vue&type=style&index=0&id=ddc0a004&scoped=true&lang=css&","dependencies":[{"path":"/var/www/html/ai-project/src/components/graphs/graph_entity.vue","mtime":1551454730486},{"path":"/var/www/html/ai-project/node_modules/_css-loader@1.0.1@css-loader/index.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.graph {\n  width: 100%;\n  min-height: 300px;\n  /* max-height: 400px; */\n}\n\n.tabs {\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1), 0 3px 10px 0 rgba(0, 0, 0, 0.15);\n  padding: 10px;\n  /* border-radius: 5px; */\n}\n",{"version":3,"sources":["graph_entity.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmZA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"graph_entity.vue","sourceRoot":"src/components/graphs","sourcesContent":["<template>\n  <!-- 需求图谱，基于散点图 -->\n  <div>\n    <el-tabs type=\"border-card\">\n      <el-tab-pane v-for=\"(data, index) in items\" :key=index :label=\"index\">\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n      </el-tab-pane>\n    </el-tabs>\n  </div>\n</template>\n\n<script>\n  import $router from \"./../../util/router.js\"\n  let echarts = require('echarts');\n\n  export default {\n    name: \"demandMap\",\n    props: {\n      items: {\n        type: Object,\n        default () {\n          return {\n            \"test\": \"test\"\n          }\n        }\n      },\n      keyWord: {\n        type: String,\n        default () {\n          return \"keyString\"\n        }\n      }\n    },\n    data() {\n      return {}\n    },\n    mounted() {\n      this.start_draw();\n    },\n    methods: {\n      start_draw() {\n        let itemData = this.items;\n        for (var i in itemData) {\n          console.log(\"key :\" + this.keyWord + \"_\" + i);\n          let id = this.keyWord + \"_\" + i;\n          this.draw_demandMap(id, itemData[i]);\n        }\n      },\n      transform_data(data) {\n        let result = [];\n        for (let index in data) {\n          let arr = [];\n          // 计算坐标值，令点到中心的值=correlation，即correlation^2 = x^2 + y^2\n          // 经过 abs() 和 log() 处理，平滑数据\n          // let crela = Math.log(Math.abs(data[index].correlation)+1);\n          let crela = data[index].correlation;\n          crela = Math.abs(crela) + 1;\n          crela = Math.log(crela);\n          // 横坐标 x 不超过相关性的值\n          let x = Math.random() * crela;\n          // 随机正负\n          x = x * (Math.random() > 0.5 ? 1 : -1);\n          // 计算纵坐标 y\n          let y = Math.sqrt(crela * crela - x * x);\n          // 随机正负\n          y = y * (Math.random() > 0.5 ? 1 : -1);\n\n          arr.push(x);\n          arr.push(y);\n          arr.push(data[index].name);\n          arr.push(data[index].value);\n          result.push(arr);\n        }\n        return result;\n      },\n      get_max_min(data, label) {\n        // label=1时，求最大值; label=-1时，求最小值；\n        let result = data[\"up\"][0].correlation;\n        for (let i in data) {\n          if (i === \"center\") continue;\n          for (let j = 0; j < data[i].length; j++) {\n            let flag = label * (result - data[i][j].correlation);\n            if (flag < 0) {\n              result = data[i][j].correlation;\n            }\n          }\n        }\n        result = Math.log(Math.abs(result + 1))\n        return result;\n      },\n      tooltip_format(params) {\n        let name = params.data[2];\n        let value = params.data[3];\n        let x = params.data[0];\n        let y = params.data[1];\n        let crela = Math.round(x * x + y * y);\n        // 拼接字符串\n        let str = \"\" + name + \"<br/> value: \" + value + \"<br/> correlation: \" + crela;\n        return str;\n      },\n      draw_demandMap(id, data) {\n        let graph_data = data.data;\n        let graph_title = data.title;\n        // 计算横纵轴的最大值\n        let axis_max = this.get_max_min(graph_data, 1);\n\n        // 初始化\n        let chart = document.getElementById(id);\n\n        var initial = function () {\n          let chartParent = chart.parentNode.parentNode;\n          chart.style.width = chartParent.clientWidth - 30 + \"px\";\n          chart.style.margin = \"0 auto\";\n          chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n        }\n        initial();\n\n        // 组件高度\n        let contain_height = chart.offsetHeight;\n        // 组件宽度\n        let contain_width = chart.offsetWidth;\n\n        // 获取中心点\n        let center_data = this.transform_data(graph_data.center);\n        // 获取上升点\n        let up_data = this.transform_data(graph_data.up);\n        // 获取下降点\n        let down_data = this.transform_data(graph_data.down);\n\n        let myChart = echarts.init(chart);\n\n        let option = {\n          title: {\n            text: graph_title,\n            subtext: \"距离中心点越近，相关性越强\",\n            left: \"left\"\n          },\n          toolbox: {\n            show: true,\n            feature: {\n              saveAsImage: {\n                show: true,\n                type: \"png\",\n                pixelRatio: 3\n              },\n              restore: {\n                show: true\n              }\n            }\n          },\n          // 数据区域缩放\n          dataZoom: [\n            {\n                type: 'slider',\n                // 控制x轴\n                xAxisIndex: 0,\n                bottom: \"1%\",\n                start: 0,\n                end: 100,\n                showDetail: false,\n            },\n            {\n                type: 'slider',\n                // 控制y轴\n                yAxisIndex: 0,\n                right: \"1%\",\n                start: 0,\n                end: 100,\n                showDetail: false,\n            }\n          ],\n          tooltip: {\n            show: true,\n            // formatter: this.tooltip_format(params),\n            formatter: function (params) {\n              let name = params.data[2];\n              let value = params.data[3];\n              // 计算相关性\n              let x = params.data[0];\n              let y = params.data[1];\n              let crela = Math.round(x * x + y * y);\n              // 拼接字符串\n              let str = \"\" + name + \"<br/> value: \" + value + \"<br/> distance: \" + crela;\n              return str;\n            },\n            position: \"top\"\n          },\n          legend: {\n            show: true,\n            x: \"center\",\n            y: \"top\",\n            data: [{\n                name: \"上升\"\n              },\n              {\n                name: \"下降\"\n              }\n            ]\n          },\n          series: [{\n              // 中心点-------------------\n              name: \"中心\",\n              zlevel: -1,\n              type: \"effectScatter\",\n              effectType: \"ripple\",\n              // 何时显示特效\n              showEffectOn: \"render\",\n              rippleEffect: {\n                // 动画中波纹的最大缩放比例\n                scale: 10,\n                // 动画的周期，秒数\n                period: 15,\n                // 波纹绘制方式\n                brushType: \"fill\"\n              },\n              // 图例 hover 时的联动高亮\n              legendHoverLink: true,\n              //是否开启鼠标 hover 的提示动画效果。\n              hoverAnimation: true,\n              // 使用的直角坐标系\n              // coordinateSystem: \"cartesian2d\",\n              encode: {\n                x: 0,\n                y: 1,\n                label: 2,\n              },\n              symbol: 'circle',\n              // symbolSize: axis_max,\n              symbolSize: function (center_data) {\n                // return center_data[3]\n                return (chart.parentNode.parentNode.clientWidth) / 10;\n              },\n              // 图标样式\n              itemStyle: {\n                color: \"rgba(157,211,250,0.5)\",\n\n              },\n              label: {\n                show: true,\n                color: \"#555\",\n                fontSize: 20,\n                fontWeight: \"bold\",\n                position: \"inside\",\n              },\n              data: center_data\n            },\n            {\n              // 下降的点-----------------------\n              name: \"下降\",\n              zlevel: 2,\n              // 涟漪散点图\n              type: \"effectScatter\",\n              effectType: \"ripple\",\n              showEffectOn: \"emphasis\",\n              // 散点图\n              // type: \"scatter\",\n              // 图例 hover 时的联动高亮\n              legendHoverLink: true,\n              // 使用的直角坐标系\n              // coordinateSystem: \"cartesian2d\",\n              encode: {\n                x: 0,\n                y: 1,\n                label: 2\n              },\n              symbol: 'circle',\n              // symbolSize: contain_width / 30,\n              symbolSize: function (down_data) {\n                // return down_data[3]\n                return (chart.parentNode.parentNode.clientWidth) / 30;\n              },\n              // 图标样式\n              itemStyle: {\n                // color: \"#F13C71\"\n                color: \"#45c14f\"\n              },\n              label: {\n                show: true,\n                color: \"#555\",\n                fontSize: 10,\n                position: \"bottom\",\n              },\n              emphasis: {\n                label: {\n                  fontWeight: \"bold\",\n                  fontSize: 16,\n                  backgroundColor: \"#fff\",\n                }\n              },\n              data: down_data\n            },\n            {\n              // 上升的点-----------------------\n              name: \"上升\",\n              zlevel: 2,\n              // 涟漪散点图\n              type: \"effectScatter\",\n              effectType: \"ripple\",\n              showEffectOn: \"emphasis\",\n              // 散点图\n              // type: \"scatter\",\n              // 图例 hover 时的联动高亮\n              legendHoverLink: true,\n              // 使用的直角坐标系\n              // coordinateSystem: \"cartesian2d\",\n              encode: {\n                x: 0,\n                y: 1,\n                label: 2,\n              },\n              symbol: 'circle',\n              // symbolSize: contain_width / 30,\n              symbolSize: function (up_data) {\n                // return up_data[3]\n                return (chart.parentNode.parentNode.clientWidth) / 30;\n              },\n              // 图标样式\n              itemStyle: {\n                // color: \"#6A48D7\"\n                color: \"#FFCC66\"\n              },\n              label: {\n                show: true,\n                color: \"#555\",\n                fontSize: 10,\n                position: \"bottom\",\n              },\n              emphasis: {\n                label: {\n                  fontWeight: \"bold\",\n                  fontSize: 16,\n                  backgroundColor: \"#fff\"\n                }\n              },\n              data: up_data\n            }\n          ],\n          // x轴--------------------------------------------------\n          xAxis: [{\n            show: true,\n            zlevel: 20,\n            type: 'value',\n            // 坐标轴最大最小值\n            min: -axis_max,\n            max: axis_max,\n            axisLine: {\n              lineStyle: {\n                color: \"#aaa\",\n                opacity: 0.5\n              }\n            },\n            axisLabel: {\n              show: false,\n              margin: contain_height / 25,\n              fontWeight: \"bold\",\n              formatter: function (value, index) {\n                var xlabel = [\"弱相关\", \" \", '强相关', \" \", '强相关', \" \", '弱相关'];\n                return xlabel[index]\n              },\n            },\n            // x轴分割线\n            splitLine: {\n              show: false,\n            },\n            splitArea: {\n              show: false,\n            },\n          }],\n          // y轴--------------------------------------------------\n          yAxis: [{\n            show: false,\n            zlevel: 0,\n            type: 'value',\n            top: \"10%\",\n            min: -axis_max,\n            max: axis_max,\n          }],\n        }\n\n        myChart.setOption(option);\n\n        window.addEventListener('resize', function () {\n          initial();\n          // chart.style.width = this.initial_style(chart);\n          myChart.resize()\n        })\n\n        myChart.on(\"click\", function (params) {\n          // window.open(\"https://www.baidu.com/baidu?wd=\" + params.seriesName);\n          $router.push({\n            path: \"/displayInfo\",\n            query: {\n              query: params.data[2]\n            }\n          });\n\n        })\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .graph {\n    width: 100%;\n    min-height: 300px;\n    /* max-height: 400px; */\n  }\n\n  .tabs {\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1), 0 3px 10px 0 rgba(0, 0, 0, 0.15);\n    padding: 10px;\n    /* border-radius: 5px; */\n  }\n</style>"]}]}