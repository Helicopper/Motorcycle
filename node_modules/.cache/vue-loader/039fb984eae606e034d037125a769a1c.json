{"remainingRequest":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/ssd1/gfy/ai-project/src/components/graphs/graph_geo.vue?vue&type=style&index=0&id=e90efd62&scoped=true&lang=css&","dependencies":[{"path":"/ssd1/gfy/ai-project/src/components/graphs/graph_geo.vue","mtime":1585902033000},{"path":"/ssd1/gfy/ai-project/node_modules/_css-loader@1.0.1@css-loader/index.js","mtime":1574947025000},{"path":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/stylePostLoader.js","mtime":1574947006000},{"path":"/ssd1/gfy/ai-project/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":1574947004000},{"path":"/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018000},{"path":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":1574947026000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  .wrap{\n  \twidth:900px;\n  \tmargin:0 auto;\n  \tposition: relative;\n\t}   \n  \n  .left{\n\t\twidth:300px;\n\t\theight:500px;\n\t\tposition: absolute;\n\t\ttop:0;\n\t\tleft:0;\n\t\tmargin: 0% -3%;\n\t\tbackground: #E1E1E1;\n\t\tborder:7px solid #FFFFFF;}\n  \n  .right{\n\t\twidth:600px;\n\t\theight:500px;\n\t\tbackground: #dbeef3;\n\t\tposition: absolute;\n\t\ttop:0;\n\t\tright:0;\n\t\tmargin: 0% -3%;\n\t\tborder:7px solid #FFFFFF;}\n  \n  .blank{\n\t\twidth:600px;\n\t\theight:550px;}\n\t\n  .name{\n\t\tdisplay: inline-block;\n\t\tfont-size: 25px;\n\t\tfont-weight: 700;\n\t\tbackground: #f5f5f5;\n\t\tpadding: 25px;\n\t\twidth:100%;\n\t\ttext-align: center;}\n\t\t\n\tp{\n\t\tfont-size:12px;\n\t\ttext-align:center;\n\t\tcolor: #999999;}\n\t\t\n\tbody{\n\tbackground:#F2F2F2;}\n   \n  .left ul {\n    list-style: none;\n    margin: 25px 30px 15px 30px;}\n\n  .left li {\n    padding: 10px 0;\n\tfont-size: 13px;\n    border-bottom: 1px solid #999999;\n\ttext-align: center;}\n\t\n   .texts{\n\t   width:300px;\n\t   height:auto;\n\t   font-size: 14px;\n\t   padding: 25px;\n\t   font-family: \"arial black\";\n   }\n",{"version":3,"sources":["graph_geo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgWA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"graph_geo.vue","sourceRoot":"src/components/graphs","sourcesContent":["<template>\n  <div class=\"hellotheworld\">\n\t<div class=\"wrap\">\n\t\t<aside class=\"left\">\n\t\t\t<p>figure2</p>\n\t\t\t<div class=\"name\">广告商地理分布</div>\n\t\t\t<ul>\n\t\t\t\t<li>类型：地理图</li>\n\t\t\t\t<li>点：广告商</li>\n\t\t\t\t<li>点的大小：影响力</li>\n\t\t\t</ul>\n\t\t\t<div class=\"texts\">图片描述：参与竞价[关键词]的广告商的地理分布。您可以通过此图地域性地划分市场，识别潜在客户，提高参与竞价[关键词]的广告商数量，为竞价流程注入新的活力与刺激。</div>\n\t\t</aside>\n\t\t<section class=\"right\">\n\t\t\t<el-tabs type=\"border-card\">\n\t\t\t  <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n\t\t\t\t  <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n\t\t\t  </el-tab-pane>\n\t\t\t</el-tabs>\n\t\t</section>\n\t</div>\n\t<div class=\"blank\"></div>\n  </div>\n</template>\n<script>\n// 直接导入地理图所需的json文件，注意一定记得register这个文件\nimport worldJson from 'echarts/map/json/world.json'\n// import $router from '../../util/router' \nimport $search from \"./../../util/search.js\"\n\n    let echarts = require('echarts');\n    export default {\n        name: \"geo\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n     \n        methods: {\n            start_draw() {\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_geo(id,itemData[i]);\n                }\n            },\n            draw_geo(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n                // let color = this.set_color();\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n                let geoCoordMap = graph_data[\"location\"];\n                let influ = graph_data[\"influence\"];\n             \n                echarts.registerMap('world', worldJson);\n                let influence = influ.sort(this.$graphs.sortNumber).slice(-100);\n\n\t\t\t\tfunction sortNumber(a,b)\n\t\t\t\t{\n\t\t\t\t\t\treturn a.value[2] - b.value[2];\n\t\t\t\t}\n                let convertData = [];\n                for (var i = 0; i < influence.length; i++) {\n                    var geoCoord = geoCoordMap[influence[i].name];\n                    if (geoCoord) {\n                        convertData.push({\n                            name: influence[i].name,\n                            value: geoCoord.concat(influence[i].value)\n                        });\n                    }\n                }\n               // convertData=convertData.sort(sortNumber);\n                // console.log(\"convertData====\"+JSON.stringify(convertData));\n\t\t\t\t\n                let data_max = 1;\n                let data_min = 100000;\n                let max_index=0;\n                for (var i = 0; i < convertData.length; i++) {\n                    if (convertData[i]['value'][2] > data_max){\n                        data_max = convertData[i]['value'][2];\n                        max_index = i;\n                    };\n                    if (convertData[i]['value'][2]< data_min){\n                        data_min = convertData[i]['value'][2];\n                    }\n                };\n                //console.log(\"geoCoordMap\");\n                //console.log(geoCoordMap);\n   \t\t\t\t//console.log(\"geoCoordMap[[influence[max_index].name]]\");\n                //console.log(geoCoordMap[[influence[max_index].name]]);\n                let linesdata=[];\n\n                for (var i = 0; i < influence.length; i++) {\n                    var coord = geoCoordMap[influence[i].name];\n                \n                    let temp;\n                    //temp\n                    linesdata.push({\n\n                    \t name: influence[i].name,\n                         coords: [geoCoordMap[[influence[max_index].name]],coord]\n                    })\n        \n                }\n                console.log(\"linesdata\");\n             \tconsole.log(linesdata);\n\n               \n                const option = {\n               \n                     title: {\n              \t\t\t\ttext: title,\n              \t\t\t\t//subtext: '点击结点可查看该广告商的详细信息',\n              \t\t\t\tleft: 'left',\n            \t\t\t\t//backgroundColor: 'rgba(0,0,0,0)',//标题背景颜色，默认'rgba(0,0,0,0)'透明\n            \t\t\t\tborderColor: '#778899',//标题边框颜色\n            \t\t\t\tborderWidth: 5,//标题边框线宽，单位px，默认为0（无边框）\n            \t\t\t\tpadding: 5,//标题内边距，单位px\n            \t\t\t\ttextStyle: {\n                \t\t\t\tfontSize: 26\n            \t\t\t\t},\n            \t\t\t\tsubtextStyle: {\n                \t\t\t\tfontSize: 20\n            \t\t\t\t},\n             \t\t\t\tzlevel:2\n\n          \t\t\t},\n                    toolbox: {\n                        show: true,\n                        feature: {\n                            saveAsImage: {\n                                show: true,\n                                type: \"png\",\n                                pixelRatio: 3\n                            },\n                            restore: {\n                                show: true\n                            }\n                        }\n                    },\n                    tooltip: {\n                        trigger: 'item',\n                        formatter: function (data) {\n                        if (data.seriesName == 'a'){\n                            return data.marker + data.name + '：' + data.value[2];\n                        }\n                        return data.seriesName + '<br/>' +data.marker + data.name + '：' + data.value[2];\n                        }\n                    },\n                    toolbox: {\n                        show: false,\n                        orient: 'vertical',\n                        x: 'right',\n                        y: 'center',\n                        feature: {\n                            mark: { show: true },\n                            dataView: { show: true, readOnly: false },\n                            restore: { show: true },\n                            saveAsImage: { show: true }\n                        }\n                    },\n                    visualMap: {\n                        min: data_min,\n                        max: data_max,\n                        calculable: true,\n                        inRange: {\n                            color: ['#50c9c3', '#50c9c3'],\n                            //opacity:0.3\n                        },\n                        range:[data_min, data_max],\n                        textStyle: {\n                            color: '#4E4E4E'\n                        },\n                        left: '5%',\n                        bottom: '10%'\n                    },\n                    geo: {\n                        map: 'world',\n                       \n                        center: [104.114129, 37.550339],\n                        roam: true,\n                        zoom:5,\n                        label: {\n                            emphasis: {\n                                show: false\n                            }\n                        },\n                        itemStyle: {\n                            normal: {\n                                // areaColor: '#f3f3f3',\n                                areaColor:\"#ffffff\",\n                                // borderColor: '#111'\n                                borderColor: '#C0B9B9'\n                            },\n                            emphasis: {\n                                // areaColor: 'rgba(224, 31, 84, 0.2)'\n                                areaColor: \"#60acfc\",\n                            }\n                        }\n                    },\n                    series: [\n                        {\n                            //name: 'Top 100',\n                            type: 'effectScatter',\n                            coordinateSystem: 'geo',\n                            // data: convertData(influence.sort(function (a, b) {\n                            //     return b.value - a.value;\n                            // }).slice(0,10)),         \n                            data: convertData,\n                            symbol: 'circle',\n\n                            symbolSize: function (val) {\n                             \n                                return 10 + (val[2]-data_min)/(data_max - data_min)*50;\n                            },\n                            effectType:\"ripple\", \n            \t\t\t\tshowEffectOn: 'render',\n            \t\t\t\trippleEffect: {\n                \t\t\t\t\tbrushType: 'stroke'\n            \t\t\t\t},\n            \t\t\t\thoverAnimation: true,\n\n                            label: {\n                                normal: {\n                                    formatter: '{b}',\n                                    position: 'top',\n                                    show: false,\n                                    // color:'rgb(224,31,84)'\n                                    color: \"#4E4E4E\",\n                                },\n                                emphasis:{\n                                    formatter:'{b}',\n                                    position:'top',\n                                    show:true,\n                                    color:\"#4E4E4E\",\n                                    backgroundColor: \"#fff\",\n                                }\n                            },\n                            itemStyle: {\n                                normal: {\n                                    // color: 'rgb(224, 31, 84)',\n                                    //color: \"#60acfc\",\n                                    //opacity:0.3,\n                                    shadowBlur: 2,\n                                    shadowColor: '#333',\n                                    borderWidth : 4\n                                }\n                            }//,\n                            //zlevel: 1\n                        },\n                         {\n            \t\t\t\t\ttype: 'lines',\n            \n          \t\t\t\t\t\tdata:linesdata,\n          \t\t\t\t\t\tsymbol: ['none', 'arrow'],\n            \t\t\t\t\tsymbolSize: 20,\n            \t\t\t\t\tcoordinateSystem: 'geo',\n            \t\t\t\t\n            \t\t\t\t\tlineStyle: {\n                \t\t\t\t\tnormal: {\n                   \t\t\t\t\t \tcolor: '#50c9c3',\n                    \t\t\t\t\twidth: 1,\n                    \t\t\t\t\topacity: 1,\n                    \t\t\t\t\tcurveness: -0.1\n                \t\t\t\t\t}\n            \t\t\t\t\t},\n            \t\t\t\t\teffect: {\n                \t\t\t\t\tshow: true,\n                \t\t\t\t\tsmooth: false,\n                \t\t\t\t\tperiod: 6,\n                \t\t\t\t\ttrailLength: 0,  //特效尾迹的长度\n                \t\t\t\t\tsymbol: \"arrow\",\n                \t\t\t\t\tcolor: '#50c9c3',\n                \t\t\t\t\tsymbolSize: 10\n            \t\t\t\t\t},\n\n            \t\t\t\t\t/*\n            \t\t\t\t\t effect : {\n                    \t\t\t\tshow: true,\n                    \t\t\t\tscaleSize: 2,\n                    \t\t\t\tperiod: 30,\n                    \t\t\t\tcolor: '#fff',\n                    \t\t\t\tshadowBlur: 10\n                \t\t\t\t},\n \t\t\t\t\t\t\t\t*/\n            \t\t\t\t\tsmooth:true,\n               \n                \t\t\t\titemStyle : {\n                    \t\t\t\tnormal: {\n                        \t\t\t\tborderWidth:1,\n                        \t\t\t\tlineStyle: {\n                            \t\t\t\ttype: 'solid',\n                            \t\t\t\t//shadowBlur: 2\n                        \t\t\t\t}\n                    \t\t\t\t}\n                \t\t\t\t}\n            \t\t\t\t\t\n        \t\t\t\t}\n                    ]\n                \n                };\n\n                myChart.setOption(option);\n\n            \n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n              myChart.on(\"click\", function (params) {\n          \n             \t\tconsole.log(params.data.name);\n              \t\t$search.to_display3(\"2\"+\",\"+params.data.name)\n        \t})\n               \n            }\n        }\n    }\n</script>\n<style scoped>\n  .wrap{\n  \twidth:900px;\n  \tmargin:0 auto;\n  \tposition: relative;\n\t}   \n  \n  .left{\n\t\twidth:300px;\n\t\theight:500px;\n\t\tposition: absolute;\n\t\ttop:0;\n\t\tleft:0;\n\t\tmargin: 0% -3%;\n\t\tbackground: #E1E1E1;\n\t\tborder:7px solid #FFFFFF;}\n  \n  .right{\n\t\twidth:600px;\n\t\theight:500px;\n\t\tbackground: #dbeef3;\n\t\tposition: absolute;\n\t\ttop:0;\n\t\tright:0;\n\t\tmargin: 0% -3%;\n\t\tborder:7px solid #FFFFFF;}\n  \n  .blank{\n\t\twidth:600px;\n\t\theight:550px;}\n\t\n  .name{\n\t\tdisplay: inline-block;\n\t\tfont-size: 25px;\n\t\tfont-weight: 700;\n\t\tbackground: #f5f5f5;\n\t\tpadding: 25px;\n\t\twidth:100%;\n\t\ttext-align: center;}\n\t\t\n\tp{\n\t\tfont-size:12px;\n\t\ttext-align:center;\n\t\tcolor: #999999;}\n\t\t\n\tbody{\n\tbackground:#F2F2F2;}\n   \n  .left ul {\n    list-style: none;\n    margin: 25px 30px 15px 30px;}\n\n  .left li {\n    padding: 10px 0;\n\tfont-size: 13px;\n    border-bottom: 1px solid #999999;\n\ttext-align: center;}\n\t\n   .texts{\n\t   width:300px;\n\t   height:auto;\n\t   font-size: 14px;\n\t   padding: 25px;\n\t   font-family: \"arial black\";\n   }\n</style>\n"]}]}