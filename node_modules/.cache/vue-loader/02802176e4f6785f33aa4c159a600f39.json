{"remainingRequest":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/ssd1/gfy/ai-project/src/components/common/backtop.vue?vue&type=style&index=0&id=35791e16&scoped=true&lang=css&","dependencies":[{"path":"/ssd1/gfy/ai-project/src/components/common/backtop.vue","mtime":1574946998000},{"path":"/ssd1/gfy/ai-project/node_modules/_css-loader@1.0.1@css-loader/index.js","mtime":1574947025000},{"path":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/stylePostLoader.js","mtime":1574947006000},{"path":"/ssd1/gfy/ai-project/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":1574947004000},{"path":"/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018000},{"path":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":1574947026000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#back-top {\n  position: fixed;\n}\n",{"version":3,"sources":["backtop.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmKA;AACA;AACA","file":"backtop.vue","sourceRoot":"src/components/common","sourcesContent":["<template>\n<div>\n  <el-button \n    :style='scrollToTopStyle' \n    v-show='showScrollTop' \n    @click=\"scrollToTop\" \n    icon=\"el-icon-arrow-up\" \n    type=\"primary\" \n    plain\n    circle>\n  </el-button>\n</div>\n</template>\n\n<script>\n// 组件代码来源：https://blog.rxliuli.com/p/a4fbddd2/\n\n  export default { \n      props: {\n      // 定义上拉按钮容器的位置\n      top: {\n        type: [Number, String],\n        default: undefined\n      },\n      bottom: {\n        type: [Number, String],\n        default: undefined\n      },\n      left: {\n        type: [Number, String],\n        default: undefined\n      },\n      right: {\n        type: [Number, String],\n        default: undefined\n      }\n    },\n    data() {\n      return {\n        showScrollTop:true,\n        timer:null,\n        scrollToTopStyle:{\n          position:'fixed',\n          top:'',\n          bottom:'',\n          left:'',\n          right:''\n        }\n      }\n    },\n    computed:{\n      showTop:function(){\n        let value = this.scrollTop > 200?true:false;\n        return value;\n      }\n    },\n    mounted() {\n      // window.addEventListener('scroll',this.getScrollTop);\n      this.initBtnPosition()\n      this.initBindScroll()\n    },\n    methods:{\n      // getScrollTop(){\n      //   this.scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;\n      // },\n      // backtop(){\n      //   document.body.scrollTop = 0;\n      //   document.documentElement.scrollTop = 0;\n      // },\n      // runScroll(){\n      //   this.scrollTo(document.documentElement,0,600);\n      // },\n      // scrollTo(element,to,duration){\n      //   if (duration <= 0) return;\n      //   var difference = to - element.scrollTop;\n      //   var perTick = difference / duration * 10;\n      //   setTimeout(function() {\n      //     element.scrollTop = element.scrollTop + perTick;\n      //     if (element.scrollTop == to) return;\n      //     this.scrollTo(element,to,duration - 10);\n      //   },10);\n      // }\n      isNumber (str) {\n        // RegExp对象，用来规定在文本中检索的内容。test()方法检索参数字符串中的指定值，返回true || false\n      if (!new RegExp('^[0-9]+([.]{1}[0-9]+)?$').test(str)) {\n        return false\n      }\n      return true\n      },\n      watchPosition () {\n        if (![this.top, this.bottom, this.left, this.right].find(i => i !== undefined)) {\n          this.scrollToTopStyle.bottom = this.scrollToTopStyle.right = '14px'\n        }\n      },\n      watchTop () {\n        if (this.top !== undefined) {\n          this.scrollToTopStyle.top = this.isNumber(this.top) ? parseFloat(this.top) + 'px' : this.top\n        }\n      },\n      watchBottom () {\n        if (this.bottom !== undefined) {\n          this.scrollToTopStyle.bottom = this.isNumber(this.bottom) ? parseFloat(this.bottom) + 'px' : this.bottom\n        }\n      },\n      watchLeft () {\n        if (this.left !== undefined) {\n          this.scrollToTopStyle.left = this.isNumber(this.left) ? parseFloat(this.left) + 'px' : this.left\n        }\n      },\n      watchRight () {\n        if (this.right !== undefined) {\n          this.scrollToTopStyle.right = this.isNumber(this.right) ? parseFloat(this.right) + 'px' : this.right\n        }\n      },\n      /**\n       * 初始化按钮的位置\n       */\n      initBtnPosition () {\n        this.watchTop()\n        this.watchBottom()\n        this.watchLeft()\n        this.watchRight()\n        this.watchPosition()\n      },\n      initBindScroll () {\n        // 监听窗口滚动\n        document.onscroll = ((oldScrollTopLength) => {\n          const clientHeight = document.documentElement.clientHeight\n          return () => {\n            const scrollTopLength = document.documentElement.scrollTop || document.body.scrollTop\n            // 如果定时器不存在的话就正常计算滚动到顶部的图标是否存在\n            if (!this.timer) {\n              // 滚动到第二屏就显示\n              this.showScrollToTop = scrollTopLength > clientHeight\n            }\n            // 向下滚动时判断判断是否正在向上滚动，是的话就清除定时器，停在当前位置\n            if (scrollTopLength > oldScrollTopLength && this.timer) {\n              // 设置这个是因为有时候 clearInterval() 并不能清除这个属性，或许是 vuejs 组件中的属性特殊一点？\n              this.timer = clearInterval(this.timer)\n            }\n            oldScrollTopLength = scrollTopLength\n          }\n        })(0)\n      },\n      /**\n       * 回到顶部\n       */\n      scrollToTop () {\n        this.timer = setInterval(() => {\n          const scrollTopLength = document.documentElement.scrollTop || document.body.scrollTop\n          if (scrollTopLength <= 0) {\n            this.timer = clearInterval(this.timer)\n            this.showScrollToTop = false\n          }\n          const spend = scrollTopLength / 5\n          document.documentElement.scrollTop = document.body.scrollTop = scrollTopLength - spend\n        }, 30)\n      }\n    },\n    components:{}\n  }\n</script>\n<style scoped>\n#back-top {\n  position: fixed;\n}\n</style>"]}]}