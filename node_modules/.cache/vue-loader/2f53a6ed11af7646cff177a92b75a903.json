{"remainingRequest":"/home/ky02/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/home/ky02/ai-project/src/components/graphs/graph_radar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ky02/ai-project/src/components/graphs/graph_radar.vue","mtime":1574946998949},{"path":"/home/ky02/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018363},{"path":"/home/ky02/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":1574947019787},{"path":"/home/ky02/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018363},{"path":"/home/ky02/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":1574947026300}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport $search from \"./../../util/search.js\"\nlet echarts = require('echarts');\nexport default {\n    name: \"radar\",\n    props: {\n        items: {\n            type: Object,\n            default () {\n                return {\n                    \"test\": \"test\"\n                }\n            }\n        },\n        keyWord: {\n            type:String,\n            default() {\n                return \"test\"\n            }\n        }\n    },\n    data() {\n        return {\n            // tabItem:\"Paper\"\n        }\n    },\n    mounted() {\n        this.start_draw();\n    },\n    // watch:{\n    //     items:function() {\n    //         // this.draw_linefold();\n    //         console.log(\"watch items:\"+ items);\n    //     },\n    //     deep:true\n    // },\n    // updated:function() {\n    //     this.$nextTick(function(){\n    //         console.log(\"updated!\");\n    //         this.start_draw();\n    //     })\n    // },\n    methods: {\n        start_draw() {\n            // let key = [];\n            // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n            let itemData = this.items;\n            // console.log(\"itemData=\"+JSON.stringify(itemData));\n            for (var i in itemData){\n                // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                let id = this.keyWord+\"_\"+i;\n                // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                this.draw_radar(id,itemData[i]);\n            }\n        },\n        draw_radar(id,data) {\n            let chart = document.getElementById(id);\n            var initial = function () {\n                // 根据想要的效果调整的公式，不是固定的\n                // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                \n                // 获取 chart 的父父结点chartParent，再根据其算宽度\n                let chartParent = chart.parentNode.parentNode;\n                chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                chart.style.margin = \"0 auto\";\n                chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n            }\n            initial();\n\n            let myChart = echarts.init(chart);\n            let title = data['title'];\n            let graph_data = data['data'];\n            let year = []; //图例，同时也是key值数组\n            let indicatorName = []; //存放name值\n            let indicator = [];  //赋给echarts的indicator\n            let seriesData = []; //json对象数组，每一个json对象包含name和value数组\n            let seriesValue = []; //遍历时临时数组，结束一轮遍历之后赋值给seriesData\n            let max = 0; //所有value的最大值\n            let series = []; //赋给echarts的series\n            let j = 0;//计数器\n            for (var key in graph_data){\n                year.push(key);\n                var oneyear = graph_data[key];\n                for (var i=0; i<oneyear.length; i++){\n                    if(max<oneyear[i].value){max=oneyear[i].value};\n                    seriesValue.push(oneyear[i].value);\n                    if(j==0){indicatorName.push(oneyear[i].name);}\n                }\n                j++;\n                //console.log(seriesValue);\n                seriesData.push({\n                    name:key,\n                    value:seriesValue\n                })\n                seriesValue = [];\n            };\n            //console.log(indicatorName);\n            for(var i=0; i<indicatorName.length; i++){\n                indicator.push({\n                    text:indicatorName[i],\n                    max:max\n                })\n            }\n            //console.log(indicator);\n            for (var i=0; i<year.length; i++) {\n                //console.log(seriesData[i]);\n                series.push({\n                    name:'浏览器（数据纯属虚构）',\n                    type: 'radar',\n                    symbol: 'none', //拐角点是否显示。默认显示圆形的点 | \"rect\"显示方形点\n                    symbolSize:5,  //拐角点的大小，等于0不显示\n                    lineStyle: {\n                        width: 1 //数据线的宽度\n                    },\n                    emphasis: {\n                        areaStyle: {\n                            // color: 'rgba(0,250,0,0.3)', //鼠标移动到数据区域内时显示的颜色\n                        }\n                    },\n                    areaStyle:{\n                        normal:{\n                            opacity:0.3 //数据区域的透明度，范围0~1\n                        }\n                    },\n                    data:[{\n                        value:seriesData[i].value,\n                        name:seriesData[i].name,\n                        label: { //数据label，显示点的值。如果symbol没有显示，这个不显示\n                            normal: {\n                                show:true,\n                                formatter:function(params) {\n                                    return params.value;\n                                }\n                            }\n                        },\n                        // lineStyle:{\n                        //     normal:{\n                        //         type:'dashed' //虚线，默认是实线\n                        //     }  \n                        // }\n                    }]\n                });\n            }\n            //console.log(series);\n\n            const option = {\n                title: {\n                    text: title,\n                    subtext: '雷达图测试版',\n                    top: 10,\n                    left: 10\n                },\n                tooltip: {\n                    trigger: 'item',\n                    backgroundColor : 'rgba(0,0,250,0.2)'\n                },\n                legend: {\n                    type: 'scroll',\n                    bottom: 10,\n                    data: year\n                },\n                // visualMap: {\n                //     top: 'middle',\n                //     right: 10,\n                //     color: ['red', 'yellow'],\n                //     calculable: true\n                // },\n                radar: {\n                  //indicator : [\n                  //    { text: 'IE8-', max: 400},\n                  //    { text: 'IE9+', max: 400},\n                  //    { text: 'Safari', max: 400},\n                  //    { text: 'Firefox', max: 400},\n                  //    { text: 'Chrome', max: 400}\n                  // ]\n                  indicator:indicator\n                },\n                triggerEvent:true,  //配置文字绑定点击事件！\n                                    //雷达图点击事件参考：https://www.cnblogs.com/sk-3/p/6673598.html\n                series : series, //具体格式见上方series的处理过程\n                color: [\"#60acfc\",\"#32d3eb\",\"#5bc49f\",\"#feb64d\",\"#ff7c7c\",\"#9287e7\"] //每一个数据区域的颜色，循环显示\n            };\n\n            myChart.setOption(option);\n\n            // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n            // window.onresize = function(){\n            //     console.log(\"window resize!\")\n            //     initial();\n            //     myChart.resize();\n            //     console.log(\"myChart resize!\")\n            // }\n\n            // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n            window.addEventListener('resize', function () {\n                initial();\n                myChart.resize()\n            })\n\n            // 这种写法无法实现自适应，不知道为什么\n            // window.onresize = (\"resize\",function() {\n            //     initial();\n            //     echart.resize()\n            // })\n            myChart.on(\"click\",function(params){\n                // console.log(params);\n                // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                if(params['componentType'] == 'radar'){\n                    // $router.push({\n                    //     path:\"/displayInfo\",\n                    //     query:{query:params['name'].toLowerCase()}\n                    // })\n                    $search.to_display(params['name'].toLowerCase())\n                }\n                if(params['componentType'] == 'series'){\n                    // $router.push({\n                    //     path:\"/displayInfo\",\n                    //     query:{query:params['data']['name'].toLowerCase()}\n                    // })\n                    $search.to_display(params['data']['name'].toLowerCase())\n                }\n\n            })\n        },\n        // set_color(){\n        //     let testcolor = [\"rgb(129, 212, 250)\",\"rgb(239, 154, 154)\",\"rgb(128, 203, 196)\",\"rgb(129, 199, 132)\",\"rgb(156, 204, 101)\",\"rgb(212, 225, 87)\",\"rgb(255, 213, 79)\",\"rgb(255, 167, 38)\",\"rgb(255, 110, 64)\",\"rgb(161, 136, 127)\",\"rgb(248, 187, 208)\",\"rgb(128, 203, 196)\",\"rgb(209, 196, 233)\"]\n        //     let num = Math.floor(Math.random() * testcolor.length);\n        //     return testcolor[num]\n        // }\n    }\n}\n",{"version":3,"sources":["graph_radar.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"graph_radar.vue","sourceRoot":"src/components/graphs","sourcesContent":["<template>\n<div>\n    <el-tabs type=\"border-card\">\n    <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n        <!-- <p>{{index}},{{items[index][\"title\"]}}</p> -->\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n    </el-tab-pane>\n</el-tabs>\n</div>\n</template>\n<script>\n    import $search from \"./../../util/search.js\"\n    let echarts = require('echarts');\n    export default {\n        name: \"radar\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_radar(id,itemData[i]);\n                }\n            },\n            draw_radar(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                    \n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n                let year = []; //图例，同时也是key值数组\n                let indicatorName = []; //存放name值\n                let indicator = [];  //赋给echarts的indicator\n                let seriesData = []; //json对象数组，每一个json对象包含name和value数组\n                let seriesValue = []; //遍历时临时数组，结束一轮遍历之后赋值给seriesData\n                let max = 0; //所有value的最大值\n                let series = []; //赋给echarts的series\n                let j = 0;//计数器\n                for (var key in graph_data){\n                    year.push(key);\n                    var oneyear = graph_data[key];\n                    for (var i=0; i<oneyear.length; i++){\n                        if(max<oneyear[i].value){max=oneyear[i].value};\n                        seriesValue.push(oneyear[i].value);\n                        if(j==0){indicatorName.push(oneyear[i].name);}\n                    }\n                    j++;\n                    //console.log(seriesValue);\n                    seriesData.push({\n                        name:key,\n                        value:seriesValue\n                    })\n                    seriesValue = [];\n                };\n                //console.log(indicatorName);\n                for(var i=0; i<indicatorName.length; i++){\n                    indicator.push({\n                        text:indicatorName[i],\n                        max:max\n                    })\n                }\n                //console.log(indicator);\n                for (var i=0; i<year.length; i++) {\n                    //console.log(seriesData[i]);\n                    series.push({\n                        name:'浏览器（数据纯属虚构）',\n                        type: 'radar',\n                        symbol: 'none', //拐角点是否显示。默认显示圆形的点 | \"rect\"显示方形点\n                        symbolSize:5,  //拐角点的大小，等于0不显示\n                        lineStyle: {\n                            width: 1 //数据线的宽度\n                        },\n                        emphasis: {\n                            areaStyle: {\n                                // color: 'rgba(0,250,0,0.3)', //鼠标移动到数据区域内时显示的颜色\n                            }\n                        },\n                        areaStyle:{\n                            normal:{\n                                opacity:0.3 //数据区域的透明度，范围0~1\n                            }\n                        },\n                        data:[{\n                            value:seriesData[i].value,\n                            name:seriesData[i].name,\n                            label: { //数据label，显示点的值。如果symbol没有显示，这个不显示\n                                normal: {\n                                    show:true,\n                                    formatter:function(params) {\n                                        return params.value;\n                                    }\n                                }\n                            },\n                            // lineStyle:{\n                            //     normal:{\n                            //         type:'dashed' //虚线，默认是实线\n                            //     }  \n                            // }\n                        }]\n                    });\n                }\n                //console.log(series);\n\n                const option = {\n                    title: {\n                        text: title,\n                        subtext: '雷达图测试版',\n                        top: 10,\n                        left: 10\n                    },\n                    tooltip: {\n                        trigger: 'item',\n                        backgroundColor : 'rgba(0,0,250,0.2)'\n                    },\n                    legend: {\n                        type: 'scroll',\n                        bottom: 10,\n                        data: year\n                    },\n                    // visualMap: {\n                    //     top: 'middle',\n                    //     right: 10,\n                    //     color: ['red', 'yellow'],\n                    //     calculable: true\n                    // },\n                    radar: {\n                      //indicator : [\n                      //    { text: 'IE8-', max: 400},\n                      //    { text: 'IE9+', max: 400},\n                      //    { text: 'Safari', max: 400},\n                      //    { text: 'Firefox', max: 400},\n                      //    { text: 'Chrome', max: 400}\n                      // ]\n                      indicator:indicator\n                    },\n                    triggerEvent:true,  //配置文字绑定点击事件！\n                                        //雷达图点击事件参考：https://www.cnblogs.com/sk-3/p/6673598.html\n                    series : series, //具体格式见上方series的处理过程\n                    color: [\"#60acfc\",\"#32d3eb\",\"#5bc49f\",\"#feb64d\",\"#ff7c7c\",\"#9287e7\"] //每一个数据区域的颜色，循环显示\n                };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    // console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    if(params['componentType'] == 'radar'){\n                        // $router.push({\n                        //     path:\"/displayInfo\",\n                        //     query:{query:params['name'].toLowerCase()}\n                        // })\n                        $search.to_display(params['name'].toLowerCase())\n                    }\n                    if(params['componentType'] == 'series'){\n                        // $router.push({\n                        //     path:\"/displayInfo\",\n                        //     query:{query:params['data']['name'].toLowerCase()}\n                        // })\n                        $search.to_display(params['data']['name'].toLowerCase())\n                    }\n\n                })\n            },\n            // set_color(){\n            //     let testcolor = [\"rgb(129, 212, 250)\",\"rgb(239, 154, 154)\",\"rgb(128, 203, 196)\",\"rgb(129, 199, 132)\",\"rgb(156, 204, 101)\",\"rgb(212, 225, 87)\",\"rgb(255, 213, 79)\",\"rgb(255, 167, 38)\",\"rgb(255, 110, 64)\",\"rgb(161, 136, 127)\",\"rgb(248, 187, 208)\",\"rgb(128, 203, 196)\",\"rgb(209, 196, 233)\"]\n            //     let num = Math.floor(Math.random() * testcolor.length);\n            //     return testcolor[num]\n            // }\n        }\n    }\n</script>\n<style>\n</style>"]}]}