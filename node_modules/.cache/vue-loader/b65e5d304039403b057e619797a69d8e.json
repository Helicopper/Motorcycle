{"remainingRequest":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/var/www/html/ai-project/src/components/graphs/relation.vue?vue&type=style&index=0&id=323979f4&scoped=true&lang=css&","dependencies":[{"path":"/var/www/html/ai-project/src/components/graphs/relation.vue","mtime":1550571812883},{"path":"/var/www/html/ai-project/node_modules/_css-loader@1.0.1@css-loader/index.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_postcss-loader@3.0.0@postcss-loader/src/index.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.graph {\n  width: 100%;\n  min-height: 300px;\n  max-height: 400px;\n}\n\n.tabs {\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1), 0 3px 10px 0 rgba(0, 0, 0, 0.15);\n  padding: 10px;\n  /* border-radius: 5px; */\n}\n",{"version":3,"sources":["relation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"relation.vue","sourceRoot":"src/components/graphs","sourcesContent":["// 关系图\n<template>\n  <div>\n    <el-tabs type=\"border-card\">\n      <el-tab-pane v-for=\"(data, index) in items\" :key=index :label=\"index\">\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n      </el-tab-pane>\n    </el-tabs>\n  </div>\n</template>\n<script>\n  let echarts = require('echarts');\n  export default {\n    name: \"demandMap\",\n    props: {\n      items: {\n        type: Object,\n        default () {\n          return {\n            \"test\": \"test\"\n          }\n        }\n      },\n      keyWord: {\n        type: String,\n        default () {\n          return \"keyString\"\n        }\n      }\n    },\n    data() {\n      return {}\n    },\n    mounted() {\n      this.start_draw();\n    },\n    methods: {\n      start_draw() {\n        let itemData = this.items;\n        for (var i in itemData) {\n          console.log(\"key :\" + this.keyWord + \"_\" + i);\n          let id = this.keyWord + \"_\" + i;\n          this.draw_demandMap(id, itemData[i][\"data\"]);\n        }\n      },\n      transform_data(data) {\n        let result = [];\n        for (let index in data) {\n          let arr = [];\n          // 计算坐标值，令点到中心的值=correlation，即correlation^2 = x^2 + y^2\n          let crela = data[index].correlation;\n          // x不超过相关性的值\n          let x = Math.random() * crela;\n          // 随机正负\n          x = x * (Math.random() > 0.5 ? 1 : -1);\n          // 计算y\n          let y = Math.sqrt(crela * crela - x * x);\n          // 随机正负\n          y = y * (Math.random() > 0.5 ? 1 : -1);\n\n          arr.push(x);\n          arr.push(y);\n          arr.push(data[index].name);\n          arr.push(data[index].value);\n          result.push(arr);\n        }\n        return result;\n      },\n      draw_demandMap(id, data) {\n        // 初始化\n        let chart = document.getElementById(id);\n        let chart_width = chart.offsetWidth;\n\n        var initial = function () {\n          let chartParent = chart.parentNode.parentNode;\n          chart.style.width = chartParent.clientWidth - 30 + \"px\";\n          // chart.style.height = (chartParent.clientWidth - 30) + \"px\";\n          chart.style.margin = \"0 auto\";\n        }\n        initial();\n\n        // 色盘\n        let colors = [\"#D53A35\", \"#334B5C\", \"#D48265\", \"#9FDABF\", \"#7FAE90\", \"#DE9325\", \"#CFB2A9\", \"#797B7F\"]\n        \n        // echarts 实例初始化\n        let myChart = echarts.init(chart);\n\n        let option = {\n          title: {\n            text: '知识图谱'\n          },\n          animationDurationUpdate: 1500,\n          animationEasingUpdate: 'quinticInOut',\n          tooltip: {\n            show: true,\n          },\n          series: [{\n            type: 'graph',\n            // 布局类型\n            // layout: \"none\",\n            layout: 'circular',\n            // layout: 'force',\n            // force: {\n            //   repulsion: chart_width * 0.5,\n            //   gravity: 0.2,\n            //   edgeLength: [50, chart_width*0.6]\n            // },\n            // 位置\n            top: \"10%\",\n            bottom: \"10%\",\n            right: \"15%\",\n            left: \"15%\",\n            progressiveThreshold: 700,\n            roam: true,\n            focusNodeAdjacency: true,\n            // 点的数据  --------------------\n            data: data.node.map(function (node, index) {\n              return {\n                name: node.name,\n                value: node.value,\n                symbolSize: node.value,\n                // symbolSize: document.getElementById(\"main\").clientWidth / 30,\n                itemStyle: {\n                  color: colors[index % colors.length],\n                  // 透明度\n                  opacity: 0.9\n                }\n              };\n            }),\n            // 边的数据  --------------------\n            links: data.links.map(function (links) {\n              return {\n                source: links.source,\n                target: links.target\n              };\n            }),\n            // 边两端标记\n            edgeSymbol: ['none', 'arrow'],\n            edgeSymbolSize: 15,\n            label: {\n              show: false,\n              // position: ['100%', '100%'],\n            },\n            lineStyle: {\n              width: 1,\n              curveness: 0.3,\n              opacity: 0.9\n            },\n            tooltip: {\n              formatter: function (params) {\n                // 判断触发的类型是 node 还是 edge\n                if (params.dataType === \"node\")\n                  return params.data.name + \": \" + params.data.value;\n                else if (params.dataType === \"edge\") {\n                  return params.data.source + \" --> \" + params.data.target;\n                }\n              }\n            },\n            emphasis: {\n              label: {\n                show: true,\n                position: 'right',\n                fontSize: 18,\n                fontWeight: \"bold\",\n              },\n              itemStyle: {\n                shadowColor: 'rgba(0, 0, 0, 0.5)',\n                shadowBlur: 5,\n                opacity: 1\n              },\n              lineStyle: {\n                width: 1.5,\n                // color: \"#000\"\n                opacity: 1,\n                shadowColor: 'rgba(0, 0, 0, 0.5)',\n                shadowBlur: 5,\n              }\n            },\n          }]\n        };\n\n        myChart.setOption(option);\n\n        window.addEventListener('resize', function () {\n          initial();\n          // chart.style.width = this.initial_style(chart);\n          myChart.resize()\n        })\n\n        myChart.on(\"click\", function (params) {\n          if (params.dataType === \"node\") {\n            window.open('https://www.baidu.com/s?wd=' + encodeURIComponent(params.data.name));\n          }\n        })\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .graph {\n    width: 100%;\n    min-height: 300px;\n    max-height: 400px;\n  }\n\n  .tabs {\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1), 0 3px 10px 0 rgba(0, 0, 0, 0.15);\n    padding: 10px;\n    /* border-radius: 5px; */\n  }\n</style>"]}]}