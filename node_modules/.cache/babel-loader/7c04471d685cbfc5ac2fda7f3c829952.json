{"remainingRequest":"/var/www/html/ai-project/node_modules/_thread-loader@1.2.0@thread-loader/dist/cjs.js!/var/www/html/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--0-0!/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/var/www/html/ai-project/src/components/graphs/graph_geo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/ai-project/src/components/graphs/graph_geo.vue","mtime":1551494853029},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_thread-loader@1.2.0@thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.sort\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 直接导入地理图所需的json文件，注意一定记得register这个文件\nimport worldJson from 'echarts/map/json/world.json'; // import $router from '../../util/router' \n\nvar echarts = require('echarts');\n\nexport default {\n  name: \"geo\",\n  props: {\n    items: {\n      type: Object,\n      default: function _default() {\n        return {\n          \"test\": \"test\"\n        };\n      }\n    },\n    keyWord: {\n      type: String,\n      default: function _default() {\n        return \"test\";\n      }\n    }\n  },\n  data: function data() {\n    return {// tabItem:\"Paper\"\n    };\n  },\n  mounted: function mounted() {\n    this.start_draw();\n  },\n  // watch:{\n  //     items:function() {\n  //         // this.draw_linefold();\n  //         console.log(\"watch items:\"+ items);\n  //     },\n  //     deep:true\n  // },\n  // updated:function() {\n  //     this.$nextTick(function(){\n  //         console.log(\"updated!\");\n  //         this.start_draw();\n  //     })\n  // },\n  methods: {\n    start_draw: function start_draw() {\n      // let key = [];\n      // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n      var itemData = this.items; // console.log(\"itemData=\"+JSON.stringify(itemData));\n\n      for (var i in itemData) {\n        // console.log(\"key :\"+this.keyWord+\"_\"+i);\n        var id = this.keyWord + \"_\" + i; // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n\n        this.draw_geo(id, itemData[i]);\n      }\n    },\n    draw_geo: function draw_geo(id, data) {\n      var chart = document.getElementById(id);\n\n      var initial = function initial() {\n        // 根据想要的效果调整的公式，不是固定的\n        // chart.style.width = (window.innerWidth/4)+80+\"px\";\n        // 获取 chart 的父父结点chartParent，再根据其算宽度\n        var chartParent = chart.parentNode.parentNode;\n        chart.style.width = chartParent.clientWidth - 30 + \"px\";\n        chart.style.margin = \"0 auto\";\n        chart.style.height = chartParent.clientWidth * 0.75 - 30 + \"px\";\n      };\n\n      initial(); // let color = this.set_color();\n\n      var myChart = echarts.init(chart);\n      var title = data['title'];\n      var graph_data = data['data'];\n      var geoCoordMap = graph_data[\"location\"];\n      var influ = graph_data[\"influence\"]; // console.log(\"influnce===\"+JSON.stringify(influence.length))\n      // registerMap地理图json文件\n\n      echarts.registerMap('world', worldJson);\n      var influence = influ.sort(this.$graphs.sortNumber).slice(-100);\n      var convertData = [];\n\n      for (var i = 0; i < influence.length; i++) {\n        var geoCoord = geoCoordMap[influence[i].name];\n\n        if (geoCoord) {\n          convertData.push({\n            name: influence[i].name,\n            value: geoCoord.concat(influence[i].value)\n          });\n        }\n      } // console.log(\"convertData====\"+JSON.stringify(convertData));\n      // console.log(convertData)\n\n\n      var data_max = 1;\n      var data_min = 100000;\n\n      for (var i = 0; i < convertData.length; i++) {\n        if (convertData[i]['value'][2] > data_max) {\n          data_max = convertData[i]['value'][2];\n        }\n\n        ;\n\n        if (convertData[i]['value'][2] < data_min) {\n          data_min = convertData[i]['value'][2];\n        }\n      }\n\n      ;\n      console.log(data_max + ',' + data_min);\n      var option = {\n        title: {\n          text: title,\n          top: 'top' // left: 'center'\n\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: function formatter(data) {\n            if (data.seriesName == 'a') {\n              return data.marker + data.name + '：' + data.value[2];\n            }\n\n            return data.seriesName + '<br/>' + data.marker + data.name + '：' + data.value[2];\n          }\n        },\n        toolbox: {\n          show: false,\n          orient: 'vertical',\n          x: 'right',\n          y: 'center',\n          feature: {\n            mark: {\n              show: true\n            },\n            dataView: {\n              show: true,\n              readOnly: false\n            },\n            restore: {\n              show: true\n            },\n            saveAsImage: {\n              show: true\n            }\n          }\n        },\n        visualMap: {\n          min: data_min,\n          max: data_max,\n          calculable: true,\n          inRange: {\n            // color: ['rgba(231, 219, 195,0.9)', 'rgba(224, 31, 84,0.9)']\n            color: ['#BBDEFB', '#1565C0']\n          },\n          textStyle: {\n            // color: '#E01F54'\n            color: '#4E4E4E'\n          },\n          left: '5%',\n          bottom: '10%'\n        },\n        geo: {\n          map: 'world',\n          roam: true,\n          zoom: 1.4,\n          label: {\n            emphasis: {\n              show: false\n            }\n          },\n          itemStyle: {\n            normal: {\n              // areaColor: '#f3f3f3',\n              areaColor: \"#ffffff\",\n              // borderColor: '#111'\n              borderColor: '#C0B9B9'\n            },\n            emphasis: {\n              // areaColor: 'rgba(224, 31, 84, 0.2)'\n              areaColor: \"#60acfc\"\n            }\n          }\n        },\n        series: [{\n          name: 'Top 100',\n          type: 'effectScatter',\n          coordinateSystem: 'geo',\n          // data: convertData(influence.sort(function (a, b) {\n          //     return b.value - a.value;\n          // }).slice(0,10)),         \n          data: convertData,\n          symbol: 'pin',\n          symbolSize: function symbolSize(val) {\n            // console.log(JSON.stringify(val));\n            return 10 + (val[2] - data_min) / (data_max - data_min) * 50;\n          },\n          showEffectOn: 'render',\n          rippleEffect: {\n            brushType: 'fill',\n            scale: 1.1\n          },\n          hoverAnimation: true,\n          label: {\n            normal: {\n              formatter: '{b}',\n              position: 'top',\n              show: false,\n              // color:'rgb(224,31,84)'\n              color: \"#4E4E4E\"\n            },\n            emphasis: {\n              formatter: '{b}',\n              position: 'top',\n              show: true,\n              color: \"#4E4E4E\"\n            }\n          },\n          itemStyle: {\n            normal: {\n              // color: 'rgb(224, 31, 84)',\n              color: \"#60acfc\",\n              shadowBlur: 10,\n              shadowColor: '#333'\n            }\n          },\n          zlevel: 1\n        }]\n      };\n      myChart.setOption(option); // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n      // window.onresize = function(){\n      //     console.log(\"window resize!\")\n      //     initial();\n      //     myChart.resize();\n      //     console.log(\"myChart resize!\")\n      // }\n      // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n\n      window.addEventListener('resize', function () {\n        initial();\n        myChart.resize();\n      }); // 这种写法无法实现自适应，不知道为什么\n      // window.onresize = (\"resize\",function() {\n      //     initial();\n      //     echart.resize()\n      // })\n\n      myChart.on(\"click\", function (params) {// console.log(params);\n        // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n        // $router.push({\n        //     path:'/displayInfo',\n        //     query:{query:params.data.name}\n        // })\n      });\n    }\n  }\n};",{"version":3,"sources":["graph_geo.vue"],"names":[],"mappings":";;;;;;;;;;;;AAWA;AACA,OAAA,SAAA,MAAA,6BAAA,C,CACA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAFA,sBAEA;AACA,eAAA;AACA,kBAAA;AADA,SAAA;AAGA;AANA,KADA;AASA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAFA,sBAEA;AACA,eAAA,MAAA;AACA;AAJA;AATA,GAFA;AAkBA,EAAA,IAlBA,kBAkBA;AACA,WAAA,CACA;AADA,KAAA;AAGA,GAtBA;AAuBA,EAAA,OAvBA,qBAuBA;AACA,SAAA,UAAA;AACA,GAzBA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,wBACA;AACA;AACA;AACA,UAAA,QAAA,GAAA,KAAA,KAAA,CAHA,CAIA;;AACA,WAAA,IAAA,CAAA,IAAA,QAAA,EAAA;AACA;AACA,YAAA,EAAA,GAAA,KAAA,OAAA,GAAA,GAAA,GAAA,CAAA,CAFA,CAGA;;AACA,aAAA,QAAA,CAAA,EAAA,EAAA,QAAA,CAAA,CAAA,CAAA;AACA;AACA,KAZA;AAaA,IAAA,QAbA,oBAaA,EAbA,EAaA,IAbA,EAaA;AACA,UAAA,KAAA,GAAA,QAAA,CAAA,cAAA,CAAA,EAAA,CAAA;;AACA,UAAA,OAAA,GAAA,SAAA,OAAA,GAAA;AACA;AACA;AAEA;AACA,YAAA,WAAA,GAAA,KAAA,CAAA,UAAA,CAAA,UAAA;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,KAAA,GAAA,WAAA,CAAA,WAAA,GAAA,EAAA,GAAA,IAAA;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,MAAA,GAAA,QAAA;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,MAAA,GAAA,WAAA,CAAA,WAAA,GAAA,IAAA,GAAA,EAAA,GAAA,IAAA;AACA,OATA;;AAUA,MAAA,OAAA,GAZA,CAaA;;AACA,UAAA,OAAA,GAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA;AACA,UAAA,KAAA,GAAA,IAAA,CAAA,OAAA,CAAA;AACA,UAAA,UAAA,GAAA,IAAA,CAAA,MAAA,CAAA;AACA,UAAA,WAAA,GAAA,UAAA,CAAA,UAAA,CAAA;AACA,UAAA,KAAA,GAAA,UAAA,CAAA,WAAA,CAAA,CAlBA,CAmBA;AAEA;;AACA,MAAA,OAAA,CAAA,WAAA,CAAA,OAAA,EAAA,SAAA;AACA,UAAA,SAAA,GAAA,KAAA,CAAA,IAAA,CAAA,KAAA,OAAA,CAAA,UAAA,EAAA,KAAA,CAAA,CAAA,GAAA,CAAA;AAEA,UAAA,WAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,QAAA,GAAA,WAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA;;AACA,YAAA,QAAA,EAAA;AACA,UAAA,WAAA,CAAA,IAAA,CAAA;AACA,YAAA,IAAA,EAAA,SAAA,CAAA,CAAA,CAAA,CAAA,IADA;AAEA,YAAA,KAAA,EAAA,QAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,KAAA;AAFA,WAAA;AAIA;AACA,OAlCA,CAmCA;AACA;;;AACA,UAAA,QAAA,GAAA,CAAA;AACA,UAAA,QAAA,GAAA,MAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,WAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,WAAA,CAAA,CAAA,CAAA,CAAA,OAAA,EAAA,CAAA,IAAA,QAAA,EAAA;AACA,UAAA,QAAA,GAAA,WAAA,CAAA,CAAA,CAAA,CAAA,OAAA,EAAA,CAAA,CAAA;AACA;;AAAA;;AACA,YAAA,WAAA,CAAA,CAAA,CAAA,CAAA,OAAA,EAAA,CAAA,IAAA,QAAA,EAAA;AACA,UAAA,QAAA,GAAA,WAAA,CAAA,CAAA,CAAA,CAAA,OAAA,EAAA,CAAA,CAAA;AACA;AACA;;AAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,QAAA,GAAA,GAAA,GAAA,QAAA;AACA,UAAA,MAAA,GAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,KADA;AAEA,UAAA,GAAA,EAAA,KAFA,CAGA;;AAHA,SADA;AAMA,QAAA,OAAA,EAAA;AACA,UAAA,OAAA,EAAA,MADA;AAEA,UAAA,SAAA,EAAA,mBAAA,IAAA,EAAA;AACA,gBAAA,IAAA,CAAA,UAAA,IAAA,GAAA,EAAA;AACA,qBAAA,IAAA,CAAA,MAAA,GAAA,IAAA,CAAA,IAAA,GAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA;;AACA,mBAAA,IAAA,CAAA,UAAA,GAAA,OAAA,GAAA,IAAA,CAAA,MAAA,GAAA,IAAA,CAAA,IAAA,GAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA;AAPA,SANA;AAeA,QAAA,OAAA,EAAA;AACA,UAAA,IAAA,EAAA,KADA;AAEA,UAAA,MAAA,EAAA,UAFA;AAGA,UAAA,CAAA,EAAA,OAHA;AAIA,UAAA,CAAA,EAAA,QAJA;AAKA,UAAA,OAAA,EAAA;AACA,YAAA,IAAA,EAAA;AAAA,cAAA,IAAA,EAAA;AAAA,aADA;AAEA,YAAA,QAAA,EAAA;AAAA,cAAA,IAAA,EAAA,IAAA;AAAA,cAAA,QAAA,EAAA;AAAA,aAFA;AAGA,YAAA,OAAA,EAAA;AAAA,cAAA,IAAA,EAAA;AAAA,aAHA;AAIA,YAAA,WAAA,EAAA;AAAA,cAAA,IAAA,EAAA;AAAA;AAJA;AALA,SAfA;AA2BA,QAAA,SAAA,EAAA;AACA,UAAA,GAAA,EAAA,QADA;AAEA,UAAA,GAAA,EAAA,QAFA;AAGA,UAAA,UAAA,EAAA,IAHA;AAIA,UAAA,OAAA,EAAA;AACA;AACA,YAAA,KAAA,EAAA,CAAA,SAAA,EAAA,SAAA;AAFA,WAJA;AAQA,UAAA,SAAA,EAAA;AACA;AACA,YAAA,KAAA,EAAA;AAFA,WARA;AAYA,UAAA,IAAA,EAAA,IAZA;AAaA,UAAA,MAAA,EAAA;AAbA,SA3BA;AA0CA,QAAA,GAAA,EAAA;AACA,UAAA,GAAA,EAAA,OADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,IAAA,EAAA,GAHA;AAIA,UAAA,KAAA,EAAA;AACA,YAAA,QAAA,EAAA;AACA,cAAA,IAAA,EAAA;AADA;AADA,WAJA;AASA,UAAA,SAAA,EAAA;AACA,YAAA,MAAA,EAAA;AACA;AACA,cAAA,SAAA,EAAA,SAFA;AAGA;AACA,cAAA,WAAA,EAAA;AAJA,aADA;AAOA,YAAA,QAAA,EAAA;AACA;AACA,cAAA,SAAA,EAAA;AAFA;AAPA;AATA,SA1CA;AAgEA,QAAA,MAAA,EAAA,CACA;AACA,UAAA,IAAA,EAAA,SADA;AAEA,UAAA,IAAA,EAAA,eAFA;AAGA,UAAA,gBAAA,EAAA,KAHA;AAIA;AACA;AACA;AACA,UAAA,IAAA,EAAA,WAPA;AAQA,UAAA,MAAA,EAAA,KARA;AASA,UAAA,UAAA,EAAA,oBAAA,GAAA,EAAA;AACA;AACA,mBAAA,KAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,QAAA,KAAA,QAAA,GAAA,QAAA,IAAA,EAAA;AACA,WAZA;AAaA,UAAA,YAAA,EAAA,QAbA;AAcA,UAAA,YAAA,EAAA;AACA,YAAA,SAAA,EAAA,MADA;AAEA,YAAA,KAAA,EAAA;AAFA,WAdA;AAkBA,UAAA,cAAA,EAAA,IAlBA;AAmBA,UAAA,KAAA,EAAA;AACA,YAAA,MAAA,EAAA;AACA,cAAA,SAAA,EAAA,KADA;AAEA,cAAA,QAAA,EAAA,KAFA;AAGA,cAAA,IAAA,EAAA,KAHA;AAIA;AACA,cAAA,KAAA,EAAA;AALA,aADA;AAQA,YAAA,QAAA,EAAA;AACA,cAAA,SAAA,EAAA,KADA;AAEA,cAAA,QAAA,EAAA,KAFA;AAGA,cAAA,IAAA,EAAA,IAHA;AAIA,cAAA,KAAA,EAAA;AAJA;AARA,WAnBA;AAkCA,UAAA,SAAA,EAAA;AACA,YAAA,MAAA,EAAA;AACA;AACA,cAAA,KAAA,EAAA,SAFA;AAGA,cAAA,UAAA,EAAA,EAHA;AAIA,cAAA,WAAA,EAAA;AAJA;AADA,WAlCA;AA0CA,UAAA,MAAA,EAAA;AA1CA,SADA;AAhEA,OAAA;AAiHA,MAAA,OAAA,CAAA,SAAA,CAAA,MAAA,EAjKA,CAmKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAA,MAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,YAAA;AACA,QAAA,OAAA;AACA,QAAA,OAAA,CAAA,MAAA;AACA,OAHA,EA5KA,CAiLA;AACA;AACA;AACA;AACA;;AACA,MAAA,OAAA,CAAA,EAAA,CAAA,OAAA,EAAA,UAAA,MAAA,EAAA,CACA;AACA;AACA;AACA;AACA;AACA;AAEA,OARA;AASA;AA5MA;AAvCA,CAAA","sourcesContent":["<template>\n<div>\n    <el-tabs type=\"border-card\">\n    <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n        <!-- <p>{{index}},{{items[index][\"title\"]}}</p> -->\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n    </el-tab-pane>\n</el-tabs>\n</div>\n</template>\n<script>\n// 直接导入地理图所需的json文件，注意一定记得register这个文件\nimport worldJson from 'echarts/map/json/world.json'\n// import $router from '../../util/router' \n\n    let echarts = require('echarts');\n    export default {\n        name: \"geo\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_geo(id,itemData[i]);\n                }\n            },\n            draw_geo(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                    \n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n                // let color = this.set_color();\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n                let geoCoordMap = graph_data[\"location\"];\n                let influ = graph_data[\"influence\"];\n                // console.log(\"influnce===\"+JSON.stringify(influence.length))\n\n                // registerMap地理图json文件\n                echarts.registerMap('world', worldJson);\n                let influence = influ.sort(this.$graphs.sortNumber).slice(-100);\n\n                let convertData = [];\n                for (var i = 0; i < influence.length; i++) {\n                    var geoCoord = geoCoordMap[influence[i].name];\n                    if (geoCoord) {\n                        convertData.push({\n                            name: influence[i].name,\n                            value: geoCoord.concat(influence[i].value)\n                        });\n                    }\n                }\n                // console.log(\"convertData====\"+JSON.stringify(convertData));\n                // console.log(convertData)\n                let data_max = 1;\n                let data_min = 100000;\n                for (var i = 0; i < convertData.length; i++) {\n                    if (convertData[i]['value'][2] > data_max){\n                        data_max = convertData[i]['value'][2];\n                    };\n                    if (convertData[i]['value'][2]< data_min){\n                        data_min = convertData[i]['value'][2];\n                    }\n                };\n                console.log(data_max+','+data_min)\n                const option = {\n                    title: {\n                        text: title,\n                        top: 'top',\n                        // left: 'center'\n                    },\n                    tooltip: {\n                        trigger: 'item',\n                        formatter: function (data) {\n                        if (data.seriesName == 'a'){\n                            return data.marker + data.name + '：' + data.value[2];\n                        }\n                        return data.seriesName + '<br/>' +data.marker + data.name + '：' + data.value[2];\n                        }\n                    },\n                    toolbox: {\n                        show: false,\n                        orient: 'vertical',\n                        x: 'right',\n                        y: 'center',\n                        feature: {\n                            mark: { show: true },\n                            dataView: { show: true, readOnly: false },\n                            restore: { show: true },\n                            saveAsImage: { show: true }\n                        }\n                    },\n                    visualMap: {\n                        min: data_min,\n                        max: data_max,\n                        calculable: true,\n                        inRange: {\n                            // color: ['rgba(231, 219, 195,0.9)', 'rgba(224, 31, 84,0.9)']\n                            color: ['#BBDEFB', '#1565C0'],\n                        },\n                        textStyle: {\n                            // color: '#E01F54'\n                            color: '#4E4E4E'\n                        },\n                        left: '5%',\n                        bottom: '10%'\n                    },\n                    geo: {\n                        map: 'world',\n                        roam: true,\n                        zoom:1.4,\n                        label: {\n                            emphasis: {\n                                show: false\n                            }\n                        },\n                        itemStyle: {\n                            normal: {\n                                // areaColor: '#f3f3f3',\n                                areaColor:\"#ffffff\",\n                                // borderColor: '#111'\n                                borderColor: '#C0B9B9'\n                            },\n                            emphasis: {\n                                // areaColor: 'rgba(224, 31, 84, 0.2)'\n                                areaColor: \"#60acfc\",\n                            }\n                        }\n                    },\n                    series: [\n                        {\n                            name: 'Top 100',\n                            type: 'effectScatter',\n                            coordinateSystem: 'geo',\n                            // data: convertData(influence.sort(function (a, b) {\n                            //     return b.value - a.value;\n                            // }).slice(0,10)),         \n                            data: convertData,\n                            symbol: 'pin',\n                            symbolSize: function (val) {\n                                // console.log(JSON.stringify(val));\n                                return 10 + (val[2]-data_min)/(data_max - data_min)*50;\n                            },\n                            showEffectOn: 'render',\n                            rippleEffect: {\n                                brushType: 'fill',\n                                scale: 1.1\n                            },\n                            hoverAnimation: true,\n                            label: {\n                                normal: {\n                                    formatter: '{b}',\n                                    position: 'top',\n                                    show: false,\n                                    // color:'rgb(224,31,84)'\n                                    color: \"#4E4E4E\",\n                                },\n                                emphasis:{\n                                    formatter:'{b}',\n                                    position:'top',\n                                    show:true,\n                                    color:\"#4E4E4E\"\n                                }\n                            },\n                            itemStyle: {\n                                normal: {\n                                    // color: 'rgb(224, 31, 84)',\n                                    color: \"#60acfc\",\n                                    shadowBlur: 10,\n                                    shadowColor: '#333'\n                                }\n                            },\n                            zlevel: 1\n                        }\n                    ]\n                \n                };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    // console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    // $router.push({\n                    //     path:'/displayInfo',\n                    //     query:{query:params.data.name}\n                    // })\n\n                })\n            }\n        }\n    }\n</script>\n<style>\n</style>"],"sourceRoot":"src/components/graphs"}]}