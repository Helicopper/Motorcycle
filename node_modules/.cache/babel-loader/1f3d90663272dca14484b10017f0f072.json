{"remainingRequest":"/ssd1/gfy/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--0-0!/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/ssd1/gfy/ai-project/src/components/graphs/graph_sun.vue?vue&type=script&lang=js&","dependencies":[{"path":"/ssd1/gfy/ai-project/src/components/graphs/graph_sun.vue","mtime":1574946998000},{"path":"/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018000},{"path":"/ssd1/gfy/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":1574947019000},{"path":"/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018000},{"path":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":1574947026000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport $search from \"./../../util/search.js\";\n\nvar echarts = require('echarts');\n\nexport default {\n  name: \"sun\",\n  props: {\n    items: {\n      type: Object,\n      default: function _default() {\n        return {\n          \"test\": \"test\"\n        };\n      }\n    },\n    keyWord: {\n      type: String,\n      default: function _default() {\n        return \"test\";\n      }\n    }\n  },\n  data: function data() {\n    return {// tabItem:\"Paper\"\n    };\n  },\n  mounted: function mounted() {\n    this.start_draw();\n  },\n  // watch:{\n  //     items:function() {\n  //         // this.draw_linefold();\n  //         console.log(\"watch items:\"+ items);\n  //     },\n  //     deep:true\n  // },\n  // updated:function() {\n  //     this.$nextTick(function(){\n  //         console.log(\"updated!\");\n  //         this.start_draw();\n  //     })\n  // },\n  methods: {\n    start_draw: function start_draw() {\n      // let key = [];\n      // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n      var itemData = this.items; // console.log(\"itemData=\"+JSON.stringify(itemData));\n\n      for (var i in itemData) {\n        // console.log(\"key :\"+this.keyWord+\"_\"+i);\n        var id = this.keyWord + \"_\" + i; // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n\n        this.draw_sun(id, itemData[i]);\n      }\n    },\n    draw_sun: function draw_sun(id, data) {\n      var chart = document.getElementById(id);\n\n      var initial = function initial() {\n        // 根据想要的效果调整的公式，不是固定的\n        // chart.style.width = (window.innerWidth/4)+80+\"px\";\n        // 获取 chart 的父父结点chartParent，再根据其算宽度\n        var chartParent = chart.parentNode.parentNode;\n        chart.style.width = chartParent.clientWidth - 30 + \"px\";\n        chart.style.margin = \"0 auto\";\n        chart.style.height = chartParent.clientWidth * 0.75 - 30 + \"px\";\n      };\n\n      initial(); // let color = this.set_color();\n\n      var myChart = echarts.init(chart);\n      var title = data['title'];\n      var graph_data = data['data'];\n\n      for (var i in graph_data) {\n        graph_data[i][\"itemStyle\"] = {\n          \"color\": this.$graphs.set_color()\n        };\n        var children = graph_data[i][\"children\"];\n\n        for (var k in children) {\n          children[k][\"itemStyle\"] = {\n            \"color\": this.$graphs.set_color()\n          };\n        }\n      } // console.log(JSON.stringify(graph_data));\n\n\n      var option = {\n        title: {\n          text: title // subtext: 'Source: https://worldcoffeeresearch.org/work/sensory-lexicon/',\n          // textStyle: {\n          //     fontSize: 14,\n          //     align: 'center'\n          // },\n          // subtextStyle: {\n          //     align: 'center'\n          // },\n          // sublink: 'https://worldcoffeeresearch.org/work/sensory-lexicon/'\n\n        },\n        tooltip: {\n          trigger: 'item',\n          // backgroundColor : 'rgba(0,0,250,0.2)',\n          backgroundColor: 'rgba(66, 66, 66,0.6)',\n          // 前面三个是颜色值，最后一个是透明度，0~1，越小越透明\n          // formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n          formatter: function formatter(params) {\n            // console.log(params);\n            var tooltipString = \"\";\n            var itemName = params[\"data\"][\"name\"];\n            var treePathInfo = params[\"treePathInfo\"];\n\n            if (treePathInfo.length == 2) {\n              var _tooltipString = \"\";\n              var _children = params[\"data\"][\"children\"];\n              _tooltipString += itemName;\n              _tooltipString += \"(\" + treePathInfo[1][\"value\"] / treePathInfo[0][\"value\"] * 100 + \"%)\" + \"<br/>\";\n\n              for (var _i in _children) {\n                _tooltipString += _children[_i][\"name\"] + \"(\" + _children[_i][\"value\"] / treePathInfo[0][\"value\"] * 100 + \"%)\" + \"<br/>\";\n              }\n\n              return _tooltipString;\n            } else if (treePathInfo.length == 3) {\n              var _tooltipString2 = \"\";\n              _tooltipString2 += itemName;\n              _tooltipString2 += \"(\" + treePathInfo[2][\"value\"] / treePathInfo[0][\"value\"] * 100 + \"%)\" + \"<br/>\";\n              return _tooltipString2;\n            } else {\n              return \"点击返回上一层\";\n            }\n          }\n        },\n        // nodeClick:false,\n        series: {\n          type: 'sunburst',\n          highlightPolicy: 'ancestor',\n          data: graph_data,\n          radius: [0, '95%'],\n          sort: null,\n          nodeClick: false,\n          emphasis: {\n            itemStyle: {\n              borderColor: 'rgba(190,190,190,0.3)' // shadowBlur:2,\n              // shadowColor:'rgba(91,91,91,0.5)'\n\n            }\n          },\n          levels: [{}, {\n            r0: '0%',\n            r: '35%',\n            itemStyle: {\n              borderWidth: 2\n            },\n            label: {\n              rotate: 'tangential' // 标签文字是垂直于半径摆放 | 默认是按平行于半径摆放\n\n            }\n          }, {\n            r0: '40%',\n            r: '48%',\n            label: {\n              //align: 'right',\n              position: 'outside',\n              padding: 3\n            },\n            itemStyle: {\n              borderWidth: 4\n            }\n          }]\n        } //color: [\"#60acfc\",\"#32d3eb\",\"#5bc49f\",\"#feb64d\",\"#ff7c7c\",\"#9287e7\"]\n\n      };\n      myChart.setOption(option); // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n      // window.onresize = function(){\n      //     console.log(\"window resize!\")\n      //     initial();\n      //     myChart.resize();\n      //     console.log(\"myChart resize!\")\n      // }\n      // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n\n      window.addEventListener('resize', function () {\n        initial();\n        myChart.resize();\n      }); // 这种写法无法实现自适应，不知道为什么\n      // window.onresize = (\"resize\",function() {\n      //     initial();\n      //     echart.resize()\n      // })\n\n      myChart.on(\"click\", function (params) {\n        // console.log(params);\n        // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n        // $router.push({\n        //     path:\"/displayInfo\",\n        //     query:{query:params.data.name.toLowerCase()}\n        // })\n        var query = params.data.name.toLowerCase();\n        $search.to_display(query);\n      });\n    }\n  }\n};",{"version":3,"sources":["graph_sun.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>\n    <el-tabs type=\"border-card\">\n    <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n        <!-- <p>{{index}},{{items[index][\"title\"]}}</p> -->\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n    </el-tab-pane>\n</el-tabs>\n</div>\n</template>\n<script>\nimport $search from \"./../../util/search.js\"\n\n    let echarts = require('echarts');\n    export default {\n        name: \"sun\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_sun(id,itemData[i]);\n                }\n            },\n            draw_sun(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                    \n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n                // let color = this.set_color();\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n                for (let i in graph_data){\n                    graph_data[i][\"itemStyle\"] = {\n                        \"color\":this.$graphs.set_color()\n                    }\n                    let children = graph_data[i][\"children\"]\n                    for (let k in children){\n                        children[k][\"itemStyle\"] = {\n                            \"color\":this.$graphs.set_color()\n                        }\n                    }\n                }\n                // console.log(JSON.stringify(graph_data));\n\n                const option = {\n                    title: {\n                        text: title,\n                        // subtext: 'Source: https://worldcoffeeresearch.org/work/sensory-lexicon/',\n                        // textStyle: {\n                        //     fontSize: 14,\n                        //     align: 'center'\n                        // },\n                        // subtextStyle: {\n                        //     align: 'center'\n                        // },\n                        // sublink: 'https://worldcoffeeresearch.org/work/sensory-lexicon/'\n                    },\n                    tooltip: {\n                        trigger: 'item',\n                        // backgroundColor : 'rgba(0,0,250,0.2)',\n                        backgroundColor:'rgba(66, 66, 66,0.6)',  // 前面三个是颜色值，最后一个是透明度，0~1，越小越透明\n                        // formatter: \"{a} <br/>{b} : {c} ({d}%)\"\n                        formatter:function(params){\n                            // console.log(params);\n                            let tooltipString = \"\";\n                            let itemName = params[\"data\"][\"name\"];\n                            let treePathInfo = params[\"treePathInfo\"];\n\n                            if(treePathInfo.length == 2) {\n                                let tooltipString = \"\";\n                                let children = params[\"data\"][\"children\"];\n                                tooltipString += itemName;\n                                tooltipString += \"(\"+ (treePathInfo[1][\"value\"]/treePathInfo[0][\"value\"])*100 + \"%)\" + \"<br/>\"\n                                for (let i in children){\n                                    tooltipString += children[i][\"name\"] + \"(\" + (children[i][\"value\"]/treePathInfo[0][\"value\"])*100 + \"%)\" + \"<br/>\"\n                                }\n                                return tooltipString\n                            }\n                            else if (treePathInfo.length == 3) {\n                                let tooltipString = \"\" ;\n                                tooltipString += itemName;\n                                tooltipString += \"(\"+ (treePathInfo[2][\"value\"]/treePathInfo[0][\"value\"])*100 + \"%)\" + \"<br/>\"\n                                return tooltipString\n                            }\n                            else {\n                                return \"点击返回上一层\"\n                            }\n                            \n                        }\n                    },\n                    // nodeClick:false,\n                    series: {\n                        type: 'sunburst',\n                        highlightPolicy: 'ancestor',\n                        data: graph_data,\n                        radius: [0, '95%'],\n                        sort: null,\n                        nodeClick:false,\n                        emphasis:{\n                            itemStyle:{\n                                borderColor:'rgba(190,190,190,0.3)',\n                                // shadowBlur:2,\n                                // shadowColor:'rgba(91,91,91,0.5)'\n                            }\n                        },\n                        levels: [{},\n                            {\n                            r0: '0%',\n                            r: '35%',\n                            itemStyle: {\n                                borderWidth: 2\n                            },\n                            label: {\n                                rotate: 'tangential'  // 标签文字是垂直于半径摆放 | 默认是按平行于半径摆放\n                            }\n                        }, {\n                            r0: '40%',\n                            r: '48%',\n                            label: {\n                                //align: 'right',\n                                position:'outside',\n                                padding:3\n                            },\n                            itemStyle:{\n                                borderWidth:4\n                            }\n                        }]\n                    },\n                    //color: [\"#60acfc\",\"#32d3eb\",\"#5bc49f\",\"#feb64d\",\"#ff7c7c\",\"#9287e7\"]\n                };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    // console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    // $router.push({\n                    //     path:\"/displayInfo\",\n                    //     query:{query:params.data.name.toLowerCase()}\n                    // })\n                    let query = params.data.name.toLowerCase()\n                    $search.to_display(query)\n                })\n            },\n            // set_color(){\n            //     let testcolor = [\"rgb(129, 212, 250)\",\"rgb(239, 154, 154)\",\"rgb(128, 203, 196)\",\"rgb(129, 199, 132)\",\"rgb(156, 204, 101)\",\"rgb(212, 225, 87)\",\"rgb(255, 213, 79)\",\"rgb(255, 167, 38)\",\"rgb(255, 110, 64)\",\"rgb(161, 136, 127)\",\"rgb(248, 187, 208)\",\"rgb(128, 203, 196)\",\"rgb(209, 196, 233)\"]\n            //     let num = Math.floor(Math.random() * testcolor.length);\n            //     return testcolor[num]\n            // }\n        }\n    }\n</script>\n<style>\n  .graph {\n    width: 100%;\n    min-height: 300px;\n    /* height: 400px; */\n  }\n  .tabs {\n      box-shadow:0 2px 4px 0 rgba(0,0,0,0.1), 0 3px 10px 0 rgba(0,0,0,0.15);\n      padding:10px;\n      /* border-radius: 5px; */\n  }\n</style>"],"sourceRoot":"src/components/graphs"}]}