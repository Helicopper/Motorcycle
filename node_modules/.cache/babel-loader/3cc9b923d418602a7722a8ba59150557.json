{"remainingRequest":"/home/ky02/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!/home/ky02/ai-project/node_modules/_eslint-loader@2.1.1@eslint-loader/index.js??ref--13-0!/home/ky02/ai-project/src/util/bus.js","dependencies":[{"path":"/home/ky02/ai-project/src/util/bus.js","mtime":1576583685305},{"path":"/home/ky02/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018363},{"path":"/home/ky02/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":1574947019787},{"path":"/home/ky02/ai-project/node_modules/_eslint-loader@2.1.1@eslint-loader/index.js","mtime":1574947018800}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _typeof from \"/home/ky02/ai-project/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\n\n/*\nbus作为数据存储中心，并负责组件间数据通信\n在 main.js 中已将 bus 写入vue的原型，可用 this.$bus 全局调用bus\n\n组件直接使用bus的数据\n使用 $bus 的 methods 获取数据\n\n事件监听\n发送 this.$bus.$emit(eventname, value)\n监听 this.$bus.$on(eventname, function(value){ 对应操作 })\n\n资料来源：https://www.jb51.net/article/136758.htm\n*/\nimport Vue from 'vue';\nexport default new Vue({\n  methods: {\n    get_query_text: function get_query_text() {\n      return this.query_data.query_text;\n    },\n    return_testdata: function return_testdata() {\n      return this.test_data;\n    },\n    update_query_text: function update_query_text(val) {\n      if (val != \"\") {\n        this.query_data.query_text = val;\n      }\n    },\n    // 接收数据结果\n\n    /*  receive_result(val) {\n        if(val === \"   [delete] Deleting directory /var/www/html/ai/MINA_STEP1/classes/main\") {\n          console.log(\"error: 114 server is not running!\");\n          // el组件，警告框\n          this.$notify.error({\n            title: 'ERROR',\n            message: \"服务器故障，请稍后再试！\",\n            offset: 100\n          });\n        }\n        else if(val === \"114Wrongnull\") {\n          // el组件，警告框\n          console.log(val);\n          this.$notify.error({\n            title: 'ERROR',\n            message: \"服务器故障，请稍后再试！\",\n            offset: 100,\n            duration: 0\n          });\n        }\n        else {\n          this.highlight_query(val);\n          this.query_data.query_result = val;\n        }\n        // 停止 loading\n        this.$bus.$emit(\"changeLoading\", false)\n      },*/\n    // 取出数据\n    get_result: function get_result() {\n      this.$bus.$emit(\"changeLoading\", false);\n      return this.query_data.query_result;\n    },\n    // 取出图的数据\n    get_result_graph: function get_result_graph() {\n      return this.query_data.query_result.visual;\n    },\n    clean_last_result: function clean_last_result() {\n      this.query_data.query_result = \"\";\n    },\n    // 高亮检索词前的处理\n    highlight_query: function highlight_query(data) {\n      // 使用 replace() 方法和正则 RegExp，将样式写入结果的query中\n      var query = this.get_query_text().toUpperCase(); // i不区分大小写，g全文匹配\n\n      var replaceReg = new RegExp(query, \"gi\");\n      var replaceStr = \"<span style=\\\"text-decoration:underline;display:inline-block;margin:0 .1em;color:#409EFF;\\\">\" + query + \"</span>\";\n\n      for (var type in data) {\n        if (type === \"visual\") continue; // 进入paper，news层级\n\n        for (var item in data[type]) {\n          for (var item_data in data[type][item]) {\n            var info = data[type][item][item_data];\n\n            if (typeof info === \"string\") {\n              data[type][item][item_data] = data[type][item][item_data].replace(replaceReg, replaceStr);\n            } // typeof()中数组也返回\"object\"\n            else if (_typeof(info) === \"object\") {\n                data[type][item][item_data].forEach(function (e) {\n                  e = e.replace(replaceReg, replaceStr);\n                });\n              }\n          }\n        }\n      }\n    }\n  },\n  data: function data() {\n    return {\n      data: \"origin data\",\n      query_data: {\n        query_text: \"\",\n        type: \"\",\n        seq: \"\",\n        query_result: {}\n      }\n    };\n  }\n});",{"version":3,"sources":["/home/ky02/ai-project/src/util/bus.js"],"names":["Vue","methods","get_query_text","query_data","query_text","return_testdata","test_data","update_query_text","val","get_result","$bus","$emit","query_result","get_result_graph","visual","clean_last_result","highlight_query","data","query","toUpperCase","replaceReg","RegExp","replaceStr","type","item","item_data","info","replace","forEach","e","seq"],"mappings":";;;;;AAAA;;;;;;;;;;;;;AAcA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,eAAe,IAAIA,GAAJ,CAAQ;AACrBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,cADO,4BACU;AACf,aAAO,KAAKC,UAAL,CAAgBC,UAAvB;AACD,KAHM;AAIPC,IAAAA,eAJO,6BAIW;AAChB,aAAO,KAAKC,SAAZ;AACD,KANM;AAOPC,IAAAA,iBAPO,6BAOWC,GAPX,EAOgB;AACrB,UAAIA,GAAG,IAAI,EAAX,EAAe;AACb,aAAKL,UAAL,CAAgBC,UAAhB,GAA6BI,GAA7B;AACD;AACF,KAXM;AAYP;;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BE;AACAC,IAAAA,UAzCO,wBAyCM;AACX,WAAKC,IAAL,CAAUC,KAAV,CAAgB,eAAhB,EAAiC,KAAjC;AACH,aAAO,KAAKR,UAAL,CAAgBS,YAAvB;AACE,KA5CM;AA6CP;AACAC,IAAAA,gBA9CO,8BA8CY;AACjB,aAAO,KAAKV,UAAL,CAAgBS,YAAhB,CAA6BE,MAApC;AACD,KAhDM;AAiDPC,IAAAA,iBAjDO,+BAiDa;AAClB,WAAKZ,UAAL,CAAgBS,YAAhB,GAA+B,EAA/B;AACD,KAnDM;AAoDP;AACAI,IAAAA,eArDO,2BAqDSC,IArDT,EAqDe;AACpB;AACA,UAAIC,KAAK,GAAG,KAAKhB,cAAL,GAAsBiB,WAAtB,EAAZ,CAFoB,CAGpB;;AACA,UAAIC,UAAU,GAAG,IAAIC,MAAJ,CAAWH,KAAX,EAAkB,IAAlB,CAAjB;AACA,UAAII,UAAU,GAAG,iGAAiGJ,KAAjG,GAAyG,SAA1H;;AACA,WAAI,IAAIK,IAAR,IAAgBN,IAAhB,EAAsB;AACpB,YAAGM,IAAI,KAAK,QAAZ,EAAsB,SADF,CAEpB;;AACA,aAAI,IAAIC,IAAR,IAAgBP,IAAI,CAACM,IAAD,CAApB,EAA4B;AAC1B,eAAI,IAAIE,SAAR,IAAqBR,IAAI,CAACM,IAAD,CAAJ,CAAWC,IAAX,CAArB,EAAuC;AACrC,gBAAIE,IAAI,GAAGT,IAAI,CAACM,IAAD,CAAJ,CAAWC,IAAX,EAAiBC,SAAjB,CAAX;;AACA,gBAAG,OAAOC,IAAP,KAAiB,QAApB,EAA8B;AAC5BT,cAAAA,IAAI,CAACM,IAAD,CAAJ,CAAWC,IAAX,EAAiBC,SAAjB,IAA8BR,IAAI,CAACM,IAAD,CAAJ,CAAWC,IAAX,EAAiBC,SAAjB,EAA4BE,OAA5B,CAAoCP,UAApC,EAAgDE,UAAhD,CAA9B;AACD,aAFD,CAGA;AAHA,iBAIK,IAAG,QAAOI,IAAP,MAAiB,QAApB,EAA8B;AACjCT,gBAAAA,IAAI,CAACM,IAAD,CAAJ,CAAWC,IAAX,EAAiBC,SAAjB,EAA4BG,OAA5B,CAAoC,UAAAC,CAAC,EAAI;AACvCA,kBAAAA,CAAC,GAAGA,CAAC,CAACF,OAAF,CAAUP,UAAV,EAAsBE,UAAtB,CAAJ;AACD,iBAFD;AAGD;AACF;AACF;AACF;AACF;AA7EM,GADY;AAgFrBL,EAAAA,IAhFqB,kBAgFd;AACL,WAAO;AACLA,MAAAA,IAAI,EAAE,aADD;AAELd,MAAAA,UAAU,EAAE;AACVC,QAAAA,UAAU,EAAE,EADF;AAEVmB,QAAAA,IAAI,EAAE,EAFI;AAGVO,QAAAA,GAAG,EAAE,EAHK;AAIVlB,QAAAA,YAAY,EAAE;AAJJ;AAFP,KAAP;AASD;AA1FoB,CAAR,CAAf","sourcesContent":["/*\nbus作为数据存储中心，并负责组件间数据通信\n在 main.js 中已将 bus 写入vue的原型，可用 this.$bus 全局调用bus\n\n组件直接使用bus的数据\n使用 $bus 的 methods 获取数据\n\n事件监听\n发送 this.$bus.$emit(eventname, value)\n监听 this.$bus.$on(eventname, function(value){ 对应操作 })\n\n资料来源：https://www.jb51.net/article/136758.htm\n*/\n\nimport Vue from 'vue';\n\nexport default new Vue({\n  methods: {\n    get_query_text() {\n      return this.query_data.query_text;\n    },\n    return_testdata() {\n      return this.test_data;\n    },\n    update_query_text(val) {\n      if (val != \"\") {\n        this.query_data.query_text = val;\n      }\n    },\n    // 接收数据结果\n  /*  receive_result(val) {\n      if(val === \"   [delete] Deleting directory /var/www/html/ai/MINA_STEP1/classes/main\") {\n        console.log(\"error: 114 server is not running!\");\n        // el组件，警告框\n        this.$notify.error({\n          title: 'ERROR',\n          message: \"服务器故障，请稍后再试！\",\n          offset: 100\n        });\n      }\n      else if(val === \"114Wrongnull\") {\n        // el组件，警告框\n        console.log(val);\n        this.$notify.error({\n          title: 'ERROR',\n          message: \"服务器故障，请稍后再试！\",\n          offset: 100,\n          duration: 0\n        });\n      }\n      else {\n        this.highlight_query(val);\n        this.query_data.query_result = val;\n      }\n      // 停止 loading\n      this.$bus.$emit(\"changeLoading\", false)\n    },*/\n    // 取出数据\n    get_result() {\n      this.$bus.$emit(\"changeLoading\", false)\n\t  return this.query_data.query_result;\n    },\n    // 取出图的数据\n    get_result_graph() {\n      return this.query_data.query_result.visual;\n    },\n    clean_last_result() {\n      this.query_data.query_result = \"\";\n    },\n    // 高亮检索词前的处理\n    highlight_query(data) {\n      // 使用 replace() 方法和正则 RegExp，将样式写入结果的query中\n      let query = this.get_query_text().toUpperCase();\n      // i不区分大小写，g全文匹配\n      let replaceReg = new RegExp(query, \"gi\");\n      let replaceStr = \"<span style=\\\"text-decoration:underline;display:inline-block;margin:0 .1em;color:#409EFF;\\\">\" + query + \"</span>\";\n      for(let type in data) {\n        if(type === \"visual\") continue;\n        // 进入paper，news层级\n        for(let item in data[type]) {\n          for(let item_data in data[type][item]) {\n            let info = data[type][item][item_data]\n            if(typeof(info) === \"string\") {\n              data[type][item][item_data] = data[type][item][item_data].replace(replaceReg, replaceStr);\n            }\n            // typeof()中数组也返回\"object\"\n            else if(typeof(info) === \"object\") {\n              data[type][item][item_data].forEach(e => {\n                e = e.replace(replaceReg, replaceStr);\n              });\n            }\n          }\n        }\n      }\n    }\n  },\n  data() {\n    return {\n      data: \"origin data\",\n      query_data: {\n        query_text: \"\",\n        type: \"\",\n        seq: \"\",\n        query_result: {}\n      },\n    }\n  }\n});\n"]}]}