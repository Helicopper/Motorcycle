{"remainingRequest":"/home/ky02/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!/home/ky02/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--0-0!/home/ky02/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/home/ky02/ai-project/src/components/graphs/graph_linefold.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ky02/ai-project/src/components/graphs/graph_linefold.vue","mtime":1574946998955},{"path":"/home/ky02/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018363},{"path":"/home/ky02/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":1574947019787},{"path":"/home/ky02/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018363},{"path":"/home/ky02/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":1574947026300}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport $search from \"./../../util/search.js\";\n\nvar echarts = require('echarts');\n\nexport default {\n  name: \"linefold\",\n  props: {\n    items: {\n      type: Object,\n      default: function _default() {\n        return {\n          \"test\": \"test\"\n        };\n      }\n    },\n    keyWord: {\n      type: String,\n      default: function _default() {\n        return \"keyString\";\n      }\n    }\n  },\n  data: function data() {\n    return {// tabItem:\"Paper\"\n    };\n  },\n  mounted: function mounted() {\n    // this.draw_linefold();\n    this.start_draw();\n  },\n  // watch:{\n  //     items:function() {\n  //         // this.draw_linefold();\n  //         console.log(\"watch items:\"+ items);\n  //     },\n  //     deep:true\n  // },\n  // updated:function() {\n  //     this.$nextTick(function(){\n  //         console.log(\"updated!\");\n  //         this.start_draw();\n  //     })\n  // },\n  methods: {\n    start_draw: function start_draw() {\n      // let key = [];\n      // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n      var itemData = this.items; // console.log(\"itemData=\"+JSON.stringify(itemData));\n\n      for (var i in itemData) {\n        console.log(\"key :\" + this.keyWord + \"_\" + i);\n        var id = this.keyWord + \"_\" + i; // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n\n        this.draw_linefold(id, itemData[i]);\n      }\n    },\n    draw_linefold: function draw_linefold(id, data) {\n      // console.log(\"draw_linefold！\");\n      // console.log(\"id:\"+id,\"data:\"+data);\n      // let testdata = this.items;\n      var title = data['title'];\n      var testdata = data['data']; // let chart = document.getElementById(\"linefold\");\n\n      var chart = document.getElementById(id); // 给echart初始化宽度，替代系统的初始值100px。参考博客：https://unordered.org/timelines/5a0c74067b000000\n\n      var initial = function initial() {\n        // 根据想要的效果调整的公式，不是固定的\n        // chart.style.width = (window.innerWidth/4)+80+\"px\";\n        // 获取 chart 的父父结点chartParent，再根据其算宽度\n        var chartParent = chart.parentNode.parentNode;\n        chart.style.width = chartParent.clientWidth - 30 + \"px\";\n        chart.style.margin = \"0 auto\";\n        chart.style.height = chartParent.clientWidth * 0.75 - 30 + \"px\";\n      };\n\n      initial(); // 初始化图的宽度\n      // chart.style.width = this.initial_style(chart);\n\n      var myChart = echarts.init(chart);\n      var datakey = [];\n      var year = [];\n      var series = [];\n      var j = 0;\n\n      for (var key in testdata) {\n        datakey.push(key);\n        var value = [];\n\n        for (var i in testdata[key]) {\n          if (j == 0) {\n            year.push(i);\n          }\n\n          var oneword = testdata[key];\n          value.push(oneword[i]);\n        }\n\n        j++; //console.log(value)\n\n        series.push({\n          name: key,\n          type: 'line',\n          data: value,\n          smooth: true\n        });\n      } //console.log(year)\n      //console.log(datakey);\n      //console.log(series);\n\n\n      var option = {\n        title: {\n          text: title\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          // data:['cnn','rnn','lstm','svm','gbdt','perception']\n          data: datakey,\n          y: \"10%\"\n        },\n        grid: {\n          left: '0%',\n          right: '3%',\n          bottom: '0%',\n          top: \"18%\",\n          containLabel: true\n        },\n        toolbox: {\n          feature: {\n            dataZoom: {},\n            saveAsImage: {}\n          }\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: false,\n          data: year\n        },\n        yAxis: {\n          type: 'value' // type:'log'\n\n        },\n        series: series,\n        // color: [\"#60acfc\",\"#32d3eb\",\"#5bc49f\",\"#feb64d\",\"#ff7c7c\",\"#9287e7\"]\n        color: [\"#60acfc\", \"#5bc49f\", \"#9287e7\"]\n      };\n      myChart.setOption(option); // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n      // window.onresize = function(){\n      //     console.log(\"window resize!\")\n      //     initial();\n      //     myChart.resize();\n      //     console.log(\"myChart resize!\")\n      // }\n      // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n\n      window.addEventListener('resize', function () {\n        initial(); // chart.style.width = this.initial_style(chart);\n\n        myChart.resize();\n      }); // 这种写法无法实现自适应，不知道为什么\n      // window.onresize = (\"resize\",function() {\n      //     initial();\n      //     echart.resize()\n      // })\n\n      myChart.on(\"click\", function (params) {\n        // console.log(params);\n        // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n        // $router.push({\n        //     path:\"/displayInfo\",\n        //     query:{query:params['seriesName'].toLowerCase()}\n        // })\n        var query = params['seriesName'].toLowerCase();\n        $search.to_display(query);\n      });\n    }\n  }\n};",{"version":3,"sources":["graph_linefold.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>\n    <!-- <el-tabs v-model=\"tabItem\" type=\"border-card\">\n  <el-tab-pane label=\"Paper\">\n      <div  v-if=\"'Paper' === tabItem\" class=\"graph\" id=\"linefold\"></div>\n  </el-tab-pane>\n  <el-tab-pane label=\"News\">\n      <div v-if=\"'News' === tabItem\" class=\"graph\" id=\"linefold\"></div>\n  </el-tab-pane>\n  <el-tab-pane label=\"Patent\">\n      <p v-if=\"'Patent' === tabItem\">ttttttttttttttttttttttt</p>\n  </el-tab-pane>\n</el-tabs> -->\n\n<el-tabs type=\"border-card\">\n  <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n      <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n  </el-tab-pane>\n</el-tabs>\n\n</div>\n</template>\n<script>\n    import $search from \"./../../util/search.js\"\n    let echarts = require('echarts');\n\n    export default {\n        name: \"linefold\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord:{\n                type:String,\n                default(){\n                    return \"keyString\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            // this.draw_linefold();\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (let i in itemData){\n                    console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_linefold(id,itemData[i]);\n                }\n            },\n            draw_linefold(id, data) {\n                // console.log(\"draw_linefold！\");\n                // console.log(\"id:\"+id,\"data:\"+data);\n                // let testdata = this.items;\n                let title = data['title'];\n                let testdata = data['data'];\n                // let chart = document.getElementById(\"linefold\");\n                let chart = document.getElementById(id);\n                \n                // 给echart初始化宽度，替代系统的初始值100px。参考博客：https://unordered.org/timelines/5a0c74067b000000\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                    \n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n                \n                // 初始化图的宽度\n                // chart.style.width = this.initial_style(chart);\n\n                let myChart = echarts.init(chart);\n                let datakey = [];\n                var year = [];\n                var series = [];\n                var j = 0;\n                for (var key in testdata) {\n                    datakey.push(key);\n                    var value = [];\n                    for (var i in testdata[key]) {\n                        if (j == 0) {\n                            year.push(i);\n                        }\n                        var oneword = testdata[key];\n                        value.push(oneword[i]);\n                    }\n                    j++;\n                    //console.log(value)\n                    series.push({\n                        name: key,\n                        type: 'line',\n                        data: value,\n                        smooth: true\n                    })\n                }\n                //console.log(year)\n                //console.log(datakey);\n                //console.log(series);\n\n                const option = {\n                    title: {\n                        text: title\n                    },\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    legend: {\n                        // data:['cnn','rnn','lstm','svm','gbdt','perception']\n                        data: datakey,\n                        y:\"10%\"\n                    },\n                    grid: {\n                        left: '0%',\n                        right: '3%',\n                        bottom: '0%',\n                        top:\"18%\",\n                        containLabel: true\n                    },\n                    toolbox: {\n                        feature: {\n                            dataZoom: {},\n                            saveAsImage: {},\n                        },\n                    },\n                    xAxis: {\n                        type: 'category',\n                        boundaryGap: false,\n                        data: year\n                    },\n                    yAxis: {\n                        type: 'value'\n                        // type:'log'\n                    },\n                    series: series,\n                    // color: [\"#60acfc\",\"#32d3eb\",\"#5bc49f\",\"#feb64d\",\"#ff7c7c\",\"#9287e7\"]\n                    color: [\"#60acfc\",\"#5bc49f\",\"#9287e7\"]\n                };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    // chart.style.width = this.initial_style(chart);\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    // console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    // $router.push({\n                    //     path:\"/displayInfo\",\n                    //     query:{query:params['seriesName'].toLowerCase()}\n                    // })\n                    let query = params['seriesName'].toLowerCase();\n                    $search.to_display(query);\n                })\n            }\n        }\n    }\n</script>\n\n<style scoped>\n  .graph {\n    width: 100%;\n    min-height: 300px;\n    /* height: 400px; */\n  }\n  .tabs {\n      box-shadow:0 2px 4px 0 rgba(0,0,0,0.1), 0 3px 10px 0 rgba(0,0,0,0.15);\n      padding:10px;\n      /* border-radius: 5px; */\n  }\n</style>\n"],"sourceRoot":"src/components/graphs"}]}