{"remainingRequest":"/ssd1/gfy/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--0-0!/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/ssd1/gfy/ai-project/src/components/display_info/DisplayVisual_f1_graph.vue?vue&type=script&lang=js&","dependencies":[{"path":"/ssd1/gfy/ai-project/src/components/display_info/DisplayVisual_f1_graph.vue","mtime":1583567846000},{"path":"/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018000},{"path":"/ssd1/gfy/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":1574947019000},{"path":"/ssd1/gfy/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018000},{"path":"/ssd1/gfy/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":1574947026000}],"contextDependencies":[],"result":["import _JSON$stringify from \"/ssd1/gfy/ai-project/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from 'vue';\nimport relation from \"../graphs/graph_relation.vue\"; //import geo from \"../graphs/graph_geo.vue\"\n//import tree from \"../graphs/graph_tree.vue\"\n//import pie from \"../graphs/graph_pie.vue\"\n\nexport default {\n  name: \"DisplayVisual_f1_graph\",\n  data: function data() {\n    return {// iftree: true\n    };\n  },\n  mounted: function mounted() {// 生成可视化图表\n    // this.generate_charts();\n  },\n  computed: {\n    graph_data: function graph_data() {\n      return this.$bus.get_result_graph();\n    }\n  },\n\n  /*\n  还需要优化的问题：\n  1. 按需加载图表组件，不要一次性导入全部组件。异步组件\n  */\n  updated: function updated() {\n    // generate_charts需要在dom元素更新之后才能调用，故使用updated，而不是用mounted\n    this.generate_charts();\n  },\n  methods: {\n    // 生成所有图\n    generate_charts: function generate_charts() {\n      // 获取可视化数据\n      var visual_data = this.$bus.get_result_graph(); // 获得每一个图的数据，调用图表组件，传入数据\n\n      for (var key in visual_data) {\n        // console.log(key);\n        // 调用constructor\n        var ifUnknown = _JSON$stringify(visual_data[key]); // console.log(ifUnknown);\n        // console.log(ifUnknown.indexOf('\"data\":\"UNKNOWN\"'));\n        // data数据存在\n\n\n        if (ifUnknown.indexOf('\"data\":\"UNKNOWN\"') === -1) {\n          if (this.typeOf(key)) {\n            // console.log(\"key==\"+key+\",visual_data[key]==\"+visual_data[key]);\n            // 调用construct_graph方法，传入key和data\n            this.construct_graph(key, visual_data[key]);\n          }\n        } else {\n          // data数据不存在\n          console.log(\"===================================\");\n          console.log(key + \"图的data数据为unknown\");\n          console.log(\"===================================\");\n        }\n      }\n    },\n    // 构造图组件子类，实现挂载\n    construct_graph: function construct_graph(keyString, data) {\n      // Vue.extend全局API，组件构造器，必须要import Vue才能使用\n      var component_subclass = Vue.extend(this.typeOf(keyString)); // new一个子类，实现挂载\n\n      new component_subclass({\n        // propsData：数据传输管道，将图的数据传给调用的组件\n        propsData: {\n          items: data,\n          keyWord: keyString //$mount方法将构造器返回的\"未挂载的\"组件\"graph_linefold\"挂载到相应id的挂载点\n\n        }\n      }).$mount(\"#\" + keyString);\n    },\n    // 查询key对应需要的组件\n    typeOf: function typeOf(keyString) {\n      // 所有图的key，用数字表示图的类型。\n      var keyType = {\n        \"com_graph\": relation //\"geo_distribution\":geo\n        //\"tree_Recommended_Words_v1\":tree,\n        //pie_click_rate\":pie\n\n      };\n      return keyType[keyString];\n    }\n  },\n  components: {\n    \"graph_relation\": relation //\"graph_geo\":geo\n    //\"graph_tree\":tree,\n    //\"graph_pie\":pie\n    // 'test':function(resolve) {\n    //   require(['../test.vue'],resolve);\n\n  }\n};",{"version":3,"sources":["DisplayVisual_f1_graph.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA,OAAA,GAAA,MAAA,KAAA;AACA,OAAA,QAAA,MAAA,8BAAA,C,CACA;AACA;AACA;;AACA,eAAA;AACA,EAAA,IAAA,EAAA,wBADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA,CACA;AADA,KAAA;AAGA,GANA;AAOA,EAAA,OAPA,qBAOA,CACA;AACA;AACA,GAVA;AAWA,EAAA,QAAA,EAAA;AACA,IAAA,UADA,wBACA;AACA,aAAA,KAAA,IAAA,CAAA,gBAAA,EAAA;AACA;AAHA,GAXA;;AAiBA;;;;AAIA,EAAA,OAAA,EAAA,mBAAA;AACA;AACA,SAAA,eAAA;AACA,GAxBA;AAyBA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,eAFA,6BAEA;AAEA;AACA,UAAA,WAAA,GAAA,KAAA,IAAA,CAAA,gBAAA,EAAA,CAHA,CAKA;;AACA,WAAA,IAAA,GAAA,IAAA,WAAA,EAAA;AACA;AACA;AACA,YAAA,SAAA,GAAA,gBAAA,WAAA,CAAA,GAAA,CAAA,CAAA,CAHA,CAIA;AACA;AACA;;;AACA,YAAA,SAAA,CAAA,OAAA,CAAA,kBAAA,MAAA,CAAA,CAAA,EAAA;AACA,cAAA,KAAA,MAAA,CAAA,GAAA,CAAA,EAAA;AACA;AACA;AACA,iBAAA,eAAA,CAAA,GAAA,EAAA,WAAA,CAAA,GAAA,CAAA;AACA;AACA,SANA,MAMA;AAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,qCAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,GAAA,GAAA,kBAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,qCAAA;AACA;AACA;AACA,KA3BA;AA4BA;AACA,IAAA,eA7BA,2BA6BA,SA7BA,EA6BA,IA7BA,EA6BA;AACA;AACA,UAAA,kBAAA,GAAA,GAAA,CAAA,MAAA,CAAA,KAAA,MAAA,CAAA,SAAA,CAAA,CAAA,CAFA,CAGA;;AACA,UAAA,kBAAA,CAAA;AACA;AACA,QAAA,SAAA,EAAA;AACA,UAAA,KAAA,EAAA,IADA;AAEA,UAAA,OAAA,EAAA,SAFA,CAIA;;AAJA;AAFA,OAAA,EAOA,MAPA,CAOA,MAAA,SAPA;AAQA,KAzCA;AA2CA;AACA,IAAA,MA5CA,kBA4CA,SA5CA,EA4CA;AACA;AACA,UAAA,OAAA,GAAA;AACA,qBAAA,QADA,CAEA;AACA;AACA;;AAJA,OAAA;AAMA,aAAA,OAAA,CAAA,SAAA,CAAA;AACA;AArDA,GAzBA;AAgFA,EAAA,UAAA,EAAA;AAEA,sBAAA,QAFA,CAGA;AACA;AACA;AACA;AACA;;AAPA;AAhFA,CAAA","sourcesContent":["<template>\n  <div class=\"display-visual\">\n\n    <!--根据数据循环生成所有的图的挂载点-->\n    <div class=\"display-graph\" v-for=\"(graphData, index) in graph_data\" :key=index>\n      <!-- <div :id=\"index\">图形id：{{index}}。这个图形还未完成  请期待......</div>  -->\n      <div :id=\"index\"></div>\n    </div>\n\n  </div>\n</template>\n\n<script>\n  import Vue from 'vue'\n  import relation from \"../graphs/graph_relation.vue\"\n  //import geo from \"../graphs/graph_geo.vue\"\n  //import tree from \"../graphs/graph_tree.vue\"\n  //import pie from \"../graphs/graph_pie.vue\"\n export default {\n    name: \"DisplayVisual_f1_graph\",\n    data() {\n      return {\n        // iftree: true\n      }\n    },\n    mounted() {\n      // 生成可视化图表\n      // this.generate_charts();\n    },\n    computed: {\n      graph_data() {\n        return this.$bus.get_result_graph();\n      },\n\n    },\n    /*\n    还需要优化的问题：\n    1. 按需加载图表组件，不要一次性导入全部组件。异步组件\n    */\n    updated: function() {\n      // generate_charts需要在dom元素更新之后才能调用，故使用updated，而不是用mounted\n      this.generate_charts(); \n    },\n    methods:{ \n      // 生成所有图\n      generate_charts() { \n\n        // 获取可视化数据\n        let visual_data = this.$bus.get_result_graph();\n\n        // 获得每一个图的数据，调用图表组件，传入数据\n        for (let key in visual_data) {\n          // console.log(key);\n          // 调用constructor\n          let ifUnknown = JSON.stringify(visual_data[key]);\n          // console.log(ifUnknown);\n          // console.log(ifUnknown.indexOf('\"data\":\"UNKNOWN\"'));\n          // data数据存在\n          if(ifUnknown.indexOf('\"data\":\"UNKNOWN\"') === -1){ \n              if (this.typeOf(key)){\n                // console.log(\"key==\"+key+\",visual_data[key]==\"+visual_data[key]);\n                // 调用construct_graph方法，传入key和data\n                this.construct_graph(key,visual_data[key]);\n              }\n          }else { // data数据不存在\n            console.log(\"===================================\");\n            console.log(key+\"图的data数据为unknown\");\n            console.log(\"===================================\");\n          }\n        }\n      },\n      // 构造图组件子类，实现挂载\n      construct_graph(keyString, data) {\n        // Vue.extend全局API，组件构造器，必须要import Vue才能使用\n        let component_subclass = Vue.extend(this.typeOf(keyString));\n        // new一个子类，实现挂载\n        new component_subclass({\n          // propsData：数据传输管道，将图的数据传给调用的组件\n          propsData:{\n            items: data,\n            keyWord: keyString\n          }\n          //$mount方法将构造器返回的\"未挂载的\"组件\"graph_linefold\"挂载到相应id的挂载点\n        }).$mount(\"#\" + keyString);\n      },\n\n      // 查询key对应需要的组件\n      typeOf(keyString){\n        // 所有图的key，用数字表示图的类型。\n        let keyType = {\n          \"com_graph\":relation,\n\t\t  //\"geo_distribution\":geo\n\t\t  //\"tree_Recommended_Words_v1\":tree,\n\t\t   //pie_click_rate\":pie\n\t\t}\n        return keyType[keyString];\n      }\n    },\n    components: {\n      \n      \"graph_relation\": relation,\n\t\t//\"graph_geo\":geo\n\t\t//\"graph_tree\":tree,\n\t\t//\"graph_pie\":pie\n // 'test':function(resolve) {\n      //   require(['../test.vue'],resolve);\n    }\n  }\n\n</script>\n\n<style>\n.display-visual {\n}\n.display-graph {\n  margin: 1em 0;\n}\n</style>\n:\n"],"sourceRoot":"src/components/display_info"}]}