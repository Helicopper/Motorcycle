{"remainingRequest":"/var/www/html/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--0-0!/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/var/www/html/ai-project/src/components/graphs/graph_relation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/ai-project/src/components/graphs/graph_relation.vue","mtime":1551454730486},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.link\";\nimport \"core-js/modules/es6.function.name\";\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar echarts = require('echarts');\n\nimport $router from \"./../../util/router\";\nexport default {\n  name: \"demandMap\",\n  props: {\n    items: {\n      type: Object,\n      default: function _default() {\n        return {\n          \"test\": \"test\"\n        };\n      }\n    },\n    keyWord: {\n      type: String,\n      default: function _default() {\n        return \"keyString\";\n      }\n    }\n  },\n  data: function data() {\n    return {// graph_title: \"专家合作网络\"\n    };\n  },\n  mounted: function mounted() {\n    this.start_draw();\n  },\n  methods: {\n    start_draw: function start_draw() {\n      var itemData = this.items;\n\n      for (var i in itemData) {\n        console.log(\"key :\" + this.keyWord + \"_\" + i);\n        var id = this.keyWord + \"_\" + i;\n        this.draw_relation(id, itemData[i]);\n      }\n    },\n    draw_relation: function draw_relation(id, graph_data) {\n      var graph_title = graph_data.title;\n      var data = graph_data.data; // console.log(JSON.stringify(data));\n      // 初始化\n\n      var chart = document.getElementById(id);\n\n      var initial = function initial() {\n        var chartParent = chart.parentNode.parentNode;\n        chart.style.width = chartParent.clientWidth - 30 + \"px\";\n        chart.style.margin = \"0 auto\";\n        chart.style.height = chartParent.clientWidth * 0.75 - 30 + \"px\";\n      };\n\n      initial(); // 获取当前容器宽度，内联样式\n\n      var chart_width = chart.parentNode.parentNode.clientWidth;\n      console.log(\"chart_width: \" + chart_width); // 数据中点的个数\n\n      var nodes = data.node; // console.log(nodes)\n\n      var node_num = nodes.length; // 色盘\n\n      var colors = [\"#D53A35\", \"#334B5C\", \"#D48265\", \"#9FDABF\", \"#7FAE90\", \"#DE9325\", \"#CFB2A9\", \"#797B7F\"]; // echarts 实例初始化\n\n      var myChart = echarts.init(chart);\n      var option = {\n        title: {\n          text: graph_title\n        },\n        animationDurationUpdate: 1500,\n        animationEasingUpdate: 'quinticInOut',\n        toolbox: {\n          show: true,\n          feature: {\n            saveAsImage: {\n              show: true,\n              type: \"png\",\n              pixelRatio: 3\n            },\n            restore: {\n              show: true\n            }\n          }\n        },\n        series: [{\n          type: 'graph',\n          // --------------------------\n          // 布局类型\n          // layout: \"none\",\n          layout: 'circular',\n          circular: {\n            rotateLabel: true\n          },\n          // layout: 'force',\n          // force: {\n          //   initLayout: \"circular\",\n          //   repulsion: 100,\n          //   // gravity: 0.2,\n          //   // edgeLength: [200, 300]\n          //   // edgeLength: (chart_width / node_num) < 25 ? 25 : ((chart_width / node_num) + 10)\n          // },\n          // --------------------------\n          // 位置\n          top: \"20%\",\n          bottom: \"20%\",\n          right: \"20%\",\n          left: \"20%\",\n          progressiveThreshold: 500,\n          roam: true,\n          focusNodeAdjacency: true,\n          // 点的数据  ---------------------------------\n          data: data.node.map(function (node, index) {\n            // let this_value = node.value\n            // if(!this_value) this.value = [\"1\"];\n            return {\n              name: node.name,\n              // value: this_value[0],\n              // symbolSize: this_value[0]/800,\n              value: node.value,\n              symbolSize: Math.log(node.value + 1),\n              // symbolSize: node_num>20 ? (chart.parentNode.parentNode.clientWidth / 17) : (chart.parentNode.parentNode.clientWidth / 10),\n              // symbolSize: chart.parentNode.parentNode.clientWidth / (node_num),\n              itemStyle: {\n                color: colors[index % colors.length],\n                // 透明度\n                opacity: 0.9\n              }\n            };\n          }),\n          // 边的数据  ---------------------------------\n          links: data.link.map(function (link) {\n            return {\n              source: link.source,\n              target: link.target\n            };\n          }),\n          // 边两端标记\n          edgeSymbol: ['none', 'arrow'],\n          edgeSymbolSize: 5,\n          label: {\n            show: true,\n            position: \"right\",\n            color: \"#000\"\n          },\n          lineStyle: {\n            width: 1,\n            curveness: 0.3,\n            opacity: 0.9\n          },\n          tooltip: {\n            show: true,\n            formatter: function formatter(params) {\n              // 判断触发的类型是 node 还是 edge\n              if (params.dataType === \"node\") return params.data.name + \": \" + params.data.value;else if (params.dataType === \"edge\") {\n                return params.data.source + \" --> \" + params.data.target;\n              }\n            }\n          },\n          // 强调样式\n          emphasis: {\n            label: {\n              show: true,\n              position: 'inside',\n              fontSize: 18,\n              fontWeight: \"bold\",\n              color: \"#000\",\n              textBorderColor: \"#fff\",\n              textBorderWidth: 2\n            },\n            itemStyle: {\n              shadowColor: 'rgba(0, 0, 0, 0.5)',\n              shadowBlur: 5,\n              opacity: 1\n            },\n            lineStyle: {\n              width: 1.5,\n              color: \"#000\",\n              opacity: 1 // shadowColor: 'rgba(0, 0, 0, 0.7)',\n              // shadowBlur: 5,\n\n            },\n            edgeLabel: {\n              show: false,\n              color: \"#000\",\n              formatter: function formatter(params) {\n                return params.data.source + \"-->\" + params.data.target;\n              }\n            }\n          }\n        }]\n      };\n      myChart.setOption(option);\n      window.addEventListener('resize', function () {\n        initial(); // chart.style.width = this.initial_style(chart);\n\n        myChart.resize();\n      });\n      myChart.on(\"click\", function (params) {\n        if (params.dataType === \"node\") {\n          // window.open('https://www.baidu.com/s?wd=' + encodeURIComponent(params.data.name));\n          $router.push({\n            path: \"/displayInfo\",\n            query: {\n              query: params.data.name\n            }\n          });\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["graph_relation.vue"],"names":[],"mappings":"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","sourcesContent":["// 关系图\n<template>\n  <div>\n    <el-tabs type=\"border-card\">\n      <el-tab-pane v-for=\"(data, index) in items\" :key=index :label=\"index\">\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n      </el-tab-pane>\n    </el-tabs>\n  </div>\n</template>\n<script>\n  let echarts = require('echarts');\n  import $router from \"./../../util/router\"\n\n  export default {\n    name: \"demandMap\",\n    props: {\n      items: {\n        type: Object,\n        default () {\n          return {\n            \"test\": \"test\"\n          }\n        }\n      },\n      keyWord: {\n        type: String,\n        default () {\n          return \"keyString\"\n        }\n      }\n    },\n    data() {\n      return {\n        // graph_title: \"专家合作网络\"\n      }\n    },\n    mounted() {\n      this.start_draw();\n    },\n    methods: {\n      start_draw() {\n        let itemData = this.items;\n        for (var i in itemData) {\n          console.log(\"key :\" + this.keyWord + \"_\" + i);\n          let id = this.keyWord + \"_\" + i;\n          this.draw_relation(id, itemData[i]);\n        }\n      },\n      draw_relation(id, graph_data) {\n        let graph_title = graph_data.title;\n        let data = graph_data.data;\n        // console.log(JSON.stringify(data));\n        // 初始化\n        let chart = document.getElementById(id);\n\n        var initial = function () {\n          let chartParent = chart.parentNode.parentNode;\n          chart.style.width = chartParent.clientWidth - 30 + \"px\";\n          chart.style.margin = \"0 auto\";\n          chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n        }\n        initial();\n\n        // 获取当前容器宽度，内联样式\n        let chart_width = chart.parentNode.parentNode.clientWidth;\n        console.log(\"chart_width: \" + chart_width);\n\n        // 数据中点的个数\n        let nodes = data.node;\n        // console.log(nodes)\n        let node_num = nodes.length;\n\n        // 色盘\n        let colors = [\"#D53A35\", \"#334B5C\", \"#D48265\", \"#9FDABF\", \"#7FAE90\", \"#DE9325\", \"#CFB2A9\", \"#797B7F\"]\n\n        // echarts 实例初始化\n        let myChart = echarts.init(chart);\n\n        let option = {\n          title: {\n            text: graph_title\n          },\n          animationDurationUpdate: 1500,\n          animationEasingUpdate: 'quinticInOut',\n          toolbox: {\n            show: true,\n            feature: {\n              saveAsImage: {\n                show: true,\n                type: \"png\",\n                pixelRatio: 3\n              },\n              restore: {\n                show: true,\n              }\n            }\n          },\n          series: [{\n            type: 'graph',\n            // --------------------------\n            // 布局类型\n            // layout: \"none\",\n            layout: 'circular',\n            circular: {\n              rotateLabel: true,\n            },\n            // layout: 'force',\n            // force: {\n            //   initLayout: \"circular\",\n            //   repulsion: 100,\n            //   // gravity: 0.2,\n            //   // edgeLength: [200, 300]\n            //   // edgeLength: (chart_width / node_num) < 25 ? 25 : ((chart_width / node_num) + 10)\n            // },\n            // --------------------------\n\n            // 位置\n            top: \"20%\",\n            bottom: \"20%\",\n            right: \"20%\",\n            left: \"20%\",\n            progressiveThreshold: 500,\n            roam: true,\n            focusNodeAdjacency: true,\n            // 点的数据  ---------------------------------\n            data: data.node.map(function (node, index) {\n              // let this_value = node.value\n              // if(!this_value) this.value = [\"1\"];\n\n              return {\n                name: node.name,\n                // value: this_value[0],\n                // symbolSize: this_value[0]/800,\n                value: node.value,\n                symbolSize: Math.log(node.value+1),\n                // symbolSize: node_num>20 ? (chart.parentNode.parentNode.clientWidth / 17) : (chart.parentNode.parentNode.clientWidth / 10),\n                // symbolSize: chart.parentNode.parentNode.clientWidth / (node_num),\n                itemStyle: {\n                  color: colors[index % colors.length],\n                  // 透明度\n                  opacity: 0.9\n                }\n              };\n            }),\n            // 边的数据  ---------------------------------\n            links: data.link.map(function (link) {\n              return {\n                source: link.source,\n                target: link.target\n              };\n            }),\n            // 边两端标记\n            edgeSymbol: ['none', 'arrow'],\n            edgeSymbolSize: 5,\n            label: {\n              show: true,\n              position: \"right\",\n              color: \"#000\"\n            },\n            lineStyle: {\n              width: 1,\n              curveness: 0.3,\n              opacity: 0.9\n            },\n            tooltip: {\n              show: true,\n              formatter: function (params) {\n                // 判断触发的类型是 node 还是 edge\n                if (params.dataType === \"node\")\n                  return params.data.name + \": \" + params.data.value;\n                else if (params.dataType === \"edge\") {\n                  return params.data.source + \" --> \" + params.data.target;\n                }\n              }\n            },\n            // 强调样式\n            emphasis: {\n              label: {\n                show: true,\n                position: 'inside',\n                fontSize: 18,\n                fontWeight: \"bold\",\n                color: \"#000\",\n                textBorderColor: \"#fff\",\n                textBorderWidth: 2\n              },\n              itemStyle: {\n                shadowColor: 'rgba(0, 0, 0, 0.5)',\n                shadowBlur: 5,\n                opacity: 1\n              },\n              lineStyle: {\n                width: 1.5,\n                color: \"#000\",\n                opacity: 1,\n                // shadowColor: 'rgba(0, 0, 0, 0.7)',\n                // shadowBlur: 5,\n              },\n              edgeLabel: {\n                show: false,\n                color: \"#000\",\n                formatter: function (params) {\n                  return params.data.source + \"-->\" + params.data.target;\n                }\n              }\n            }\n          }]\n        };\n\n        myChart.setOption(option);\n\n        window.addEventListener('resize', function () {\n          initial();\n          // chart.style.width = this.initial_style(chart);\n          myChart.resize()\n        })\n\n        myChart.on(\"click\", function (params) {\n          if (params.dataType === \"node\") {\n            // window.open('https://www.baidu.com/s?wd=' + encodeURIComponent(params.data.name));\n            $router.push({\n              path: \"/displayInfo\",\n              query: {query: params.data.name}\n            })\n          }\n        })\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .graph {\n    width: 100%;\n    min-height: 300px;\n    max-height: 400px;\n  }\n\n  .tabs {\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.1), 0 3px 10px 0 rgba(0, 0, 0, 0.15);\n    padding: 10px;\n    /* border-radius: 5px; */\n  }\n</style>"],"sourceRoot":"src/components/graphs"}]}