{"remainingRequest":"/var/www/html/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--0-0!/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/var/www/html/ai-project/src/components/graphs/graph_bar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/html/ai-project/src/components/graphs/graph_bar.vue","mtime":1551276503156},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/html/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.sort\";\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar echarts = require('echarts');\n\nexport default {\n  name: \"radar\",\n  props: {\n    items: {\n      type: Object,\n      default: function _default() {\n        return {\n          \"test\": \"test\"\n        };\n      }\n    },\n    keyWord: {\n      type: String,\n      default: function _default() {\n        return \"test\";\n      }\n    }\n  },\n  data: function data() {\n    return {// tabItem:\"Paper\"\n    };\n  },\n  mounted: function mounted() {\n    this.start_draw();\n  },\n  // watch:{\n  //     items:function() {\n  //         // this.draw_linefold();\n  //         console.log(\"watch items:\"+ items);\n  //     },\n  //     deep:true\n  // },\n  // updated:function() {\n  //     this.$nextTick(function(){\n  //         console.log(\"updated!\");\n  //         this.start_draw();\n  //     })\n  // },\n  methods: {\n    start_draw: function start_draw() {\n      // let key = [];\n      // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n      var itemData = this.items; // console.log(\"itemData=\"+JSON.stringify(itemData));\n\n      for (var i in itemData) {\n        // console.log(\"key :\"+this.keyWord+\"_\"+i);\n        var id = this.keyWord + \"_\" + i; // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n\n        this.draw_radar(id, itemData[i]);\n      }\n    },\n    draw_radar: function draw_radar(id, data) {\n      var chart = document.getElementById(id);\n\n      var initial = function initial() {\n        // 根据想要的效果调整的公式，不是固定的\n        // chart.style.width = (window.innerWidth/4)+80+\"px\";\n        // 获取 chart 的父父结点chartParent，再根据其算宽度\n        var chartParent = chart.parentNode.parentNode;\n        chart.style.width = chartParent.clientWidth - 30 + \"px\";\n        chart.style.margin = \"0 auto\";\n        chart.style.height = chartParent.clientWidth * 0.75 - 30 + \"px\";\n      };\n\n      initial();\n      var myChart = echarts.init(chart);\n      var title = data['title'];\n      var graph_data = data['data'];\n      var keyArr = [];\n      var seriesData = [];\n\n      for (var i in graph_data) {\n        //   keyArr.push(i);\n        seriesData.push({\n          name: i,\n          value: graph_data[i],\n          itemStyle: {\n            color: this.$graphs.set_color()\n          }\n        });\n      } // console.log(seriesData);\n\n\n      seriesData.sort(this.$graphs.sortNumber); // sort方法对原数据进行处理，不返回新副本\n      // console.log(seriesData);\n\n      for (var _i in seriesData) {\n        keyArr.push(seriesData[_i]['name']);\n      }\n\n      var option = {\n        title: {\n          text: title,\n          // left:'center',\n          top: \"0%\"\n        },\n        // color: ['#60acfc','#32d3eb','#5bc49f','#feb64d','#ff7c7c','#9287e7'],\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            // 坐标轴指示器，坐标轴触发有效\n            type: 'line' // 默认为直线，可选为：'line' | 'shadow'\n\n          },\n          formatter: function formatter(params) {\n            // console.log(params);\n            var formatterString = params[0]['data']['name'] + \": \" + params[0]['data']['value'];\n            return formatterString;\n          }\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: [{\n          type: 'category',\n          //data:[\"map\", \"lines\", \"bar\", \"line\", \"pie\", \"scatter\", \"candlestick\", \"radar\", \"heatmap\", \"treemap\"]\n          data: keyArr,\n          axisTick: {\n            alignWithLabel: true\n          },\n          inverse: true,\n          // 反向排列 默认升序 和sortNumber方法配合使用\n          axisLabel: {\n            rotate: 60 // 横坐标标签倾斜度\n\n          }\n        }],\n        yAxis: [{\n          type: 'log'\n        }],\n        series: [{\n          name: title,\n          type: 'bar',\n          barWidth: '60%',\n          data: seriesData\n        }]\n      };\n      myChart.setOption(option); // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n      // window.onresize = function(){\n      //     console.log(\"window resize!\")\n      //     initial();\n      //     myChart.resize();\n      //     console.log(\"myChart resize!\")\n      // }\n      // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n\n      window.addEventListener('resize', function () {\n        initial();\n        myChart.resize();\n      }); // 这种写法无法实现自适应，不知道为什么\n      // window.onresize = (\"resize\",function() {\n      //     initial();\n      //     echart.resize()\n      // })\n\n      myChart.on(\"click\", function (params) {//console.log(params);\n        // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n      });\n    }\n  }\n};",{"version":3,"sources":["graph_bar.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>\n    <el-tabs type=\"border-card\">\n    <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n        <!-- <p>{{index}},{{items[index][\"title\"]}}</p> -->\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n    </el-tab-pane>\n</el-tabs>\n</div>\n</template>\n<script>\n\n    let echarts = require('echarts');\n    export default {\n        name: \"radar\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_radar(id,itemData[i]);\n                }\n            },\n            draw_radar(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n\n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n\n                let keyArr = [];\n                let seriesData = [];\n                for (let i in graph_data) {\n                //   keyArr.push(i);\n                  seriesData.push({\n                    name:i,\n                    value:graph_data[i],\n                    itemStyle:{\n                      color:this.$graphs.set_color()\n                    }\n                  });\n                }\n                // console.log(seriesData);\n                seriesData.sort(this.$graphs.sortNumber);  // sort方法对原数据进行处理，不返回新副本\n                // console.log(seriesData);\n                for (let i in seriesData) {\n                    keyArr.push(seriesData[i]['name']);\n                }\n                const option = {\n                    title:{\n                        text:title,\n                        // left:'center',\n                        top:\"0%\",\n                    },\n                    // color: ['#60acfc','#32d3eb','#5bc49f','#feb64d','#ff7c7c','#9287e7'],\n                    tooltip : {\n                        trigger: 'axis',\n                        axisPointer : {            // 坐标轴指示器，坐标轴触发有效\n                            type : 'line'        // 默认为直线，可选为：'line' | 'shadow'\n                        },\n                        formatter:function(params){\n                          // console.log(params);\n                          let formatterString = params[0]['data']['name'] + \": \" + params[0]['data']['value'];\n                          return formatterString\n                        }\n\n                    },\n                    grid: {\n                        left: '3%',\n                        right: '4%',\n                        bottom: '3%',\n                        containLabel: true\n                    },\n                    xAxis : [\n                        {\n                            type : 'category',\n                            //data:[\"map\", \"lines\", \"bar\", \"line\", \"pie\", \"scatter\", \"candlestick\", \"radar\", \"heatmap\", \"treemap\"]\n                            data : keyArr,\n                            axisTick: {\n                                alignWithLabel: true\n                            },\n                            inverse: true,  // 反向排列 默认升序 和sortNumber方法配合使用\n                            axisLabel:{\n                                rotate:60  // 横坐标标签倾斜度\n                            }\n                        }\n                    ],\n                    yAxis : [\n                        {\n                            type : 'log'\n                        }\n                    ],\n                    series : [\n                        {\n                            name:title,\n                            type:'bar',\n                            barWidth: '60%',\n                            data:seriesData\n                        }\n                    ]\n                };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    //console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                })\n            },\n            // set_color(){\n            //     let testcolor = [\"rgb(129, 212, 250)\",\"rgb(239, 154, 154)\",\"rgb(128, 203, 196)\",\"rgb(129, 199, 132)\",\"rgb(156, 204, 101)\",\"rgb(212, 225, 87)\",\"rgb(255, 213, 79)\",\"rgb(255, 167, 38)\",\"rgb(255, 110, 64)\",\"rgb(161, 136, 127)\",\"rgb(248, 187, 208)\",\"rgb(128, 203, 196)\",\"rgb(209, 196, 233)\"]\n            //     let num = Math.floor(Math.random() * testcolor.length);\n            //     return testcolor[num]\n            // }\n            // 一定要接受两个参数x，y，如果x比y小，在排序之后的数组中x放在y的前面。（升序）\n            // sortNumber(x,y) {\n            //     return x[\"value\"]-y[\"value\"];\n            // }\n        }\n\n    }\n</script>\n<style>\n</style>"],"sourceRoot":"src/components/graphs"}]}