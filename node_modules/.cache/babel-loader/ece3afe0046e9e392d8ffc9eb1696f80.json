{"remainingRequest":"/home/ky02/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!/home/ky02/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js??ref--0-0!/home/ky02/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js??vue-loader-options!/home/ky02/ai-project/src/components/graphs/graph_radar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ky02/ai-project/src/components/graphs/graph_radar.vue","mtime":1574946998949},{"path":"/home/ky02/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018363},{"path":"/home/ky02/ai-project/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":1574947019787},{"path":"/home/ky02/ai-project/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":1574947018363},{"path":"/home/ky02/ai-project/node_modules/_vue-loader@15.6.2@vue-loader/lib/index.js","mtime":1574947026300}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport $search from \"./../../util/search.js\";\n\nvar echarts = require('echarts');\n\nexport default {\n  name: \"radar\",\n  props: {\n    items: {\n      type: Object,\n      default: function _default() {\n        return {\n          \"test\": \"test\"\n        };\n      }\n    },\n    keyWord: {\n      type: String,\n      default: function _default() {\n        return \"test\";\n      }\n    }\n  },\n  data: function data() {\n    return {// tabItem:\"Paper\"\n    };\n  },\n  mounted: function mounted() {\n    this.start_draw();\n  },\n  // watch:{\n  //     items:function() {\n  //         // this.draw_linefold();\n  //         console.log(\"watch items:\"+ items);\n  //     },\n  //     deep:true\n  // },\n  // updated:function() {\n  //     this.$nextTick(function(){\n  //         console.log(\"updated!\");\n  //         this.start_draw();\n  //     })\n  // },\n  methods: {\n    start_draw: function start_draw() {\n      // let key = [];\n      // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n      var itemData = this.items; // console.log(\"itemData=\"+JSON.stringify(itemData));\n\n      for (var i in itemData) {\n        // console.log(\"key :\"+this.keyWord+\"_\"+i);\n        var id = this.keyWord + \"_\" + i; // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n\n        this.draw_radar(id, itemData[i]);\n      }\n    },\n    draw_radar: function draw_radar(id, data) {\n      var chart = document.getElementById(id);\n\n      var initial = function initial() {\n        // 根据想要的效果调整的公式，不是固定的\n        // chart.style.width = (window.innerWidth/4)+80+\"px\";\n        // 获取 chart 的父父结点chartParent，再根据其算宽度\n        var chartParent = chart.parentNode.parentNode;\n        chart.style.width = chartParent.clientWidth - 30 + \"px\";\n        chart.style.margin = \"0 auto\";\n        chart.style.height = chartParent.clientWidth * 0.75 - 30 + \"px\";\n      };\n\n      initial();\n      var myChart = echarts.init(chart);\n      var title = data['title'];\n      var graph_data = data['data'];\n      var year = []; //图例，同时也是key值数组\n\n      var indicatorName = []; //存放name值\n\n      var indicator = []; //赋给echarts的indicator\n\n      var seriesData = []; //json对象数组，每一个json对象包含name和value数组\n\n      var seriesValue = []; //遍历时临时数组，结束一轮遍历之后赋值给seriesData\n\n      var max = 0; //所有value的最大值\n\n      var series = []; //赋给echarts的series\n\n      var j = 0; //计数器\n\n      for (var key in graph_data) {\n        year.push(key);\n        var oneyear = graph_data[key];\n\n        for (var i = 0; i < oneyear.length; i++) {\n          if (max < oneyear[i].value) {\n            max = oneyear[i].value;\n          }\n\n          ;\n          seriesValue.push(oneyear[i].value);\n\n          if (j == 0) {\n            indicatorName.push(oneyear[i].name);\n          }\n        }\n\n        j++; //console.log(seriesValue);\n\n        seriesData.push({\n          name: key,\n          value: seriesValue\n        });\n        seriesValue = [];\n      }\n\n      ; //console.log(indicatorName);\n\n      for (var i = 0; i < indicatorName.length; i++) {\n        indicator.push({\n          text: indicatorName[i],\n          max: max\n        });\n      } //console.log(indicator);\n\n\n      for (var i = 0; i < year.length; i++) {\n        //console.log(seriesData[i]);\n        series.push({\n          name: '浏览器（数据纯属虚构）',\n          type: 'radar',\n          symbol: 'none',\n          //拐角点是否显示。默认显示圆形的点 | \"rect\"显示方形点\n          symbolSize: 5,\n          //拐角点的大小，等于0不显示\n          lineStyle: {\n            width: 1 //数据线的宽度\n\n          },\n          emphasis: {\n            areaStyle: {// color: 'rgba(0,250,0,0.3)', //鼠标移动到数据区域内时显示的颜色\n            }\n          },\n          areaStyle: {\n            normal: {\n              opacity: 0.3 //数据区域的透明度，范围0~1\n\n            }\n          },\n          data: [{\n            value: seriesData[i].value,\n            name: seriesData[i].name,\n            label: {\n              //数据label，显示点的值。如果symbol没有显示，这个不显示\n              normal: {\n                show: true,\n                formatter: function formatter(params) {\n                  return params.value;\n                }\n              }\n            } // lineStyle:{\n            //     normal:{\n            //         type:'dashed' //虚线，默认是实线\n            //     }  \n            // }\n\n          }]\n        });\n      } //console.log(series);\n\n\n      var option = {\n        title: {\n          text: title,\n          subtext: '雷达图测试版',\n          top: 10,\n          left: 10\n        },\n        tooltip: {\n          trigger: 'item',\n          backgroundColor: 'rgba(0,0,250,0.2)'\n        },\n        legend: {\n          type: 'scroll',\n          bottom: 10,\n          data: year\n        },\n        // visualMap: {\n        //     top: 'middle',\n        //     right: 10,\n        //     color: ['red', 'yellow'],\n        //     calculable: true\n        // },\n        radar: {\n          //indicator : [\n          //    { text: 'IE8-', max: 400},\n          //    { text: 'IE9+', max: 400},\n          //    { text: 'Safari', max: 400},\n          //    { text: 'Firefox', max: 400},\n          //    { text: 'Chrome', max: 400}\n          // ]\n          indicator: indicator\n        },\n        triggerEvent: true,\n        //配置文字绑定点击事件！\n        //雷达图点击事件参考：https://www.cnblogs.com/sk-3/p/6673598.html\n        series: series,\n        //具体格式见上方series的处理过程\n        color: [\"#60acfc\", \"#32d3eb\", \"#5bc49f\", \"#feb64d\", \"#ff7c7c\", \"#9287e7\"] //每一个数据区域的颜色，循环显示\n\n      };\n      myChart.setOption(option); // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n      // window.onresize = function(){\n      //     console.log(\"window resize!\")\n      //     initial();\n      //     myChart.resize();\n      //     console.log(\"myChart resize!\")\n      // }\n      // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n\n      window.addEventListener('resize', function () {\n        initial();\n        myChart.resize();\n      }); // 这种写法无法实现自适应，不知道为什么\n      // window.onresize = (\"resize\",function() {\n      //     initial();\n      //     echart.resize()\n      // })\n\n      myChart.on(\"click\", function (params) {\n        // console.log(params);\n        // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n        if (params['componentType'] == 'radar') {\n          // $router.push({\n          //     path:\"/displayInfo\",\n          //     query:{query:params['name'].toLowerCase()}\n          // })\n          $search.to_display(params['name'].toLowerCase());\n        }\n\n        if (params['componentType'] == 'series') {\n          // $router.push({\n          //     path:\"/displayInfo\",\n          //     query:{query:params['data']['name'].toLowerCase()}\n          // })\n          $search.to_display(params['data']['name'].toLowerCase());\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["graph_radar.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>\n    <el-tabs type=\"border-card\">\n    <el-tab-pane v-for=\"(data,index) in items\" :key=index :label=\"index\">\n        <!-- <p>{{index}},{{items[index][\"title\"]}}</p> -->\n        <div class=\"graph\" :id=\"keyWord+'_'+index\"></div>\n    </el-tab-pane>\n</el-tabs>\n</div>\n</template>\n<script>\n    import $search from \"./../../util/search.js\"\n    let echarts = require('echarts');\n    export default {\n        name: \"radar\",\n        props: {\n            items: {\n                type: Object,\n                default () {\n                    return {\n                        \"test\": \"test\"\n                    }\n                }\n            },\n            keyWord: {\n                type:String,\n                default() {\n                    return \"test\"\n                }\n            }\n        },\n        data() {\n            return {\n                // tabItem:\"Paper\"\n            }\n        },\n        mounted() {\n            this.start_draw();\n        },\n        // watch:{\n        //     items:function() {\n        //         // this.draw_linefold();\n        //         console.log(\"watch items:\"+ items);\n        //     },\n        //     deep:true\n        // },\n        // updated:function() {\n        //     this.$nextTick(function(){\n        //         console.log(\"updated!\");\n        //         this.start_draw();\n        //     })\n        // },\n        methods: {\n            start_draw() {\n                // let key = [];\n                // console.log(\"start_draw! this.items=\"+JSON.stringify(this.items));\n                let itemData = this.items;\n                // console.log(\"itemData=\"+JSON.stringify(itemData));\n                for (var i in itemData){\n                    // console.log(\"key :\"+this.keyWord+\"_\"+i);\n                    let id = this.keyWord+\"_\"+i;\n                    // console.log(\"before draw_linefold();id:\"+id+\"  data:\"+itemData[i]);\n                    this.draw_radar(id,itemData[i]);\n                }\n            },\n            draw_radar(id,data) {\n                let chart = document.getElementById(id);\n                var initial = function () {\n                    // 根据想要的效果调整的公式，不是固定的\n                    // chart.style.width = (window.innerWidth/4)+80+\"px\";\n                    \n                    // 获取 chart 的父父结点chartParent，再根据其算宽度\n                    let chartParent = chart.parentNode.parentNode;\n                    chart.style.width = chartParent.clientWidth - 30 + \"px\";\n                    chart.style.margin = \"0 auto\";\n                    chart.style.height = (chartParent.clientWidth *0.75 - 30) + \"px\";\n                }\n                initial();\n\n                let myChart = echarts.init(chart);\n                let title = data['title'];\n                let graph_data = data['data'];\n                let year = []; //图例，同时也是key值数组\n                let indicatorName = []; //存放name值\n                let indicator = [];  //赋给echarts的indicator\n                let seriesData = []; //json对象数组，每一个json对象包含name和value数组\n                let seriesValue = []; //遍历时临时数组，结束一轮遍历之后赋值给seriesData\n                let max = 0; //所有value的最大值\n                let series = []; //赋给echarts的series\n                let j = 0;//计数器\n                for (var key in graph_data){\n                    year.push(key);\n                    var oneyear = graph_data[key];\n                    for (var i=0; i<oneyear.length; i++){\n                        if(max<oneyear[i].value){max=oneyear[i].value};\n                        seriesValue.push(oneyear[i].value);\n                        if(j==0){indicatorName.push(oneyear[i].name);}\n                    }\n                    j++;\n                    //console.log(seriesValue);\n                    seriesData.push({\n                        name:key,\n                        value:seriesValue\n                    })\n                    seriesValue = [];\n                };\n                //console.log(indicatorName);\n                for(var i=0; i<indicatorName.length; i++){\n                    indicator.push({\n                        text:indicatorName[i],\n                        max:max\n                    })\n                }\n                //console.log(indicator);\n                for (var i=0; i<year.length; i++) {\n                    //console.log(seriesData[i]);\n                    series.push({\n                        name:'浏览器（数据纯属虚构）',\n                        type: 'radar',\n                        symbol: 'none', //拐角点是否显示。默认显示圆形的点 | \"rect\"显示方形点\n                        symbolSize:5,  //拐角点的大小，等于0不显示\n                        lineStyle: {\n                            width: 1 //数据线的宽度\n                        },\n                        emphasis: {\n                            areaStyle: {\n                                // color: 'rgba(0,250,0,0.3)', //鼠标移动到数据区域内时显示的颜色\n                            }\n                        },\n                        areaStyle:{\n                            normal:{\n                                opacity:0.3 //数据区域的透明度，范围0~1\n                            }\n                        },\n                        data:[{\n                            value:seriesData[i].value,\n                            name:seriesData[i].name,\n                            label: { //数据label，显示点的值。如果symbol没有显示，这个不显示\n                                normal: {\n                                    show:true,\n                                    formatter:function(params) {\n                                        return params.value;\n                                    }\n                                }\n                            },\n                            // lineStyle:{\n                            //     normal:{\n                            //         type:'dashed' //虚线，默认是实线\n                            //     }  \n                            // }\n                        }]\n                    });\n                }\n                //console.log(series);\n\n                const option = {\n                    title: {\n                        text: title,\n                        subtext: '雷达图测试版',\n                        top: 10,\n                        left: 10\n                    },\n                    tooltip: {\n                        trigger: 'item',\n                        backgroundColor : 'rgba(0,0,250,0.2)'\n                    },\n                    legend: {\n                        type: 'scroll',\n                        bottom: 10,\n                        data: year\n                    },\n                    // visualMap: {\n                    //     top: 'middle',\n                    //     right: 10,\n                    //     color: ['red', 'yellow'],\n                    //     calculable: true\n                    // },\n                    radar: {\n                      //indicator : [\n                      //    { text: 'IE8-', max: 400},\n                      //    { text: 'IE9+', max: 400},\n                      //    { text: 'Safari', max: 400},\n                      //    { text: 'Firefox', max: 400},\n                      //    { text: 'Chrome', max: 400}\n                      // ]\n                      indicator:indicator\n                    },\n                    triggerEvent:true,  //配置文字绑定点击事件！\n                                        //雷达图点击事件参考：https://www.cnblogs.com/sk-3/p/6673598.html\n                    series : series, //具体格式见上方series的处理过程\n                    color: [\"#60acfc\",\"#32d3eb\",\"#5bc49f\",\"#feb64d\",\"#ff7c7c\",\"#9287e7\"] //每一个数据区域的颜色，循环显示\n                };\n\n                myChart.setOption(option);\n\n                // 当多个图形渲染时，调用以下方法只能实现最后一个图的自适应效果\n                // window.onresize = function(){\n                //     console.log(\"window resize!\")\n                //     initial();\n                //     myChart.resize();\n                //     console.log(\"myChart resize!\")\n                // }\n\n                // 生成多个图时实现全部都能自适应。参考博客：https://blog.csdn.net/qq_25816185/article/details/82414529\n                window.addEventListener('resize', function () {\n                    initial();\n                    myChart.resize()\n                })\n\n                // 这种写法无法实现自适应，不知道为什么\n                // window.onresize = (\"resize\",function() {\n                //     initial();\n                //     echart.resize()\n                // })\n                myChart.on(\"click\",function(params){\n                    // console.log(params);\n                    // window.open(\"https://www.baidu.com/baidu?wd=\"+params.seriesName);\n                    if(params['componentType'] == 'radar'){\n                        // $router.push({\n                        //     path:\"/displayInfo\",\n                        //     query:{query:params['name'].toLowerCase()}\n                        // })\n                        $search.to_display(params['name'].toLowerCase())\n                    }\n                    if(params['componentType'] == 'series'){\n                        // $router.push({\n                        //     path:\"/displayInfo\",\n                        //     query:{query:params['data']['name'].toLowerCase()}\n                        // })\n                        $search.to_display(params['data']['name'].toLowerCase())\n                    }\n\n                })\n            },\n            // set_color(){\n            //     let testcolor = [\"rgb(129, 212, 250)\",\"rgb(239, 154, 154)\",\"rgb(128, 203, 196)\",\"rgb(129, 199, 132)\",\"rgb(156, 204, 101)\",\"rgb(212, 225, 87)\",\"rgb(255, 213, 79)\",\"rgb(255, 167, 38)\",\"rgb(255, 110, 64)\",\"rgb(161, 136, 127)\",\"rgb(248, 187, 208)\",\"rgb(128, 203, 196)\",\"rgb(209, 196, 233)\"]\n            //     let num = Math.floor(Math.random() * testcolor.length);\n            //     return testcolor[num]\n            // }\n        }\n    }\n</script>\n<style>\n</style>"],"sourceRoot":"src/components/graphs"}]}